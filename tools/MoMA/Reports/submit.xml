<?xml version="1.0" encoding="utf-8"?>
<report version="1.0">
  <metadata>
    <definitions>Mono 2.8 (4.0 Profile)</definitions>
    <momaversion>2.0.0.0</momaversion>
    <date>2010-09-27 12:10:54Z</date>
    <name />
    <email />
    <homepage />
    <organization />
    <comments />
    <apptype />
  </metadata>
  <assemblies>
    <assembly name="Banshee.AmazonMp3.Store.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Banshee.Audiobook.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Banshee.AudioCd.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Banshee.Core.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="11">
      <issue type="pinv">
        <class>Catalog</class>
        <caller>string GetString(string, string)</caller>
        <method>IntPtr dgettext(IntPtr, IntPtr)</method>
        <raw>System.IntPtr Banshee.I18n.Catalog::dgettext(System.IntPtr,System.IntPtr)</raw>
        <data>intl</data>
      </issue>
      <issue type="pinv">
        <class>Catalog</class>
        <caller>string GetString(string, string)</caller>
        <method>IntPtr gettext(IntPtr)</method>
        <raw>System.IntPtr Banshee.I18n.Catalog::gettext(System.IntPtr)</raw>
        <data>intl</data>
      </issue>
      <issue type="pinv">
        <class>Catalog</class>
        <caller>string GetString(string, string, string, int)</caller>
        <method>IntPtr dngettext(IntPtr, IntPtr, IntPtr, int)</method>
        <raw>System.IntPtr Banshee.I18n.Catalog::dngettext(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32)</raw>
        <data>intl</data>
      </issue>
      <issue type="pinv">
        <class>Catalog</class>
        <caller>string GetString(string, string, string, int)</caller>
        <method>IntPtr ngettext(IntPtr, IntPtr, int)</method>
        <raw>System.IntPtr Banshee.I18n.Catalog::ngettext(System.IntPtr,System.IntPtr,System.Int32)</raw>
        <data>intl</data>
      </issue>
      <issue type="pinv">
        <class>Catalog</class>
        <caller>void BindTextDomainCodeset(IntPtr)</caller>
        <method>IntPtr bind_textdomain_codeset(IntPtr, IntPtr)</method>
        <raw>System.IntPtr Banshee.I18n.Catalog::bind_textdomain_codeset(System.IntPtr,System.IntPtr)</raw>
        <data>intl</data>
      </issue>
      <issue type="pinv">
        <class>Catalog</class>
        <caller>void BindTextDomain(IntPtr, IntPtr)</caller>
        <method>IntPtr bindtextdomain(IntPtr, IntPtr)</method>
        <raw>System.IntPtr Banshee.I18n.Catalog::bindtextdomain(System.IntPtr,System.IntPtr)</raw>
        <data>intl</data>
      </issue>
      <issue type="pinv">
        <class>PlatformHacks</class>
        <caller>void TrapMonoJitSegv()</caller>
        <method>int sigaction(Signum, IntPtr, IntPtr)</method>
        <raw>System.Int32 Banshee.Base.PlatformHacks::sigaction(Mono.Unix.Native.Signum,System.IntPtr,System.IntPtr)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>PlatformHacks</class>
        <caller>void RestoreMonoJitSegv()</caller>
        <method>int sigaction(Signum, IntPtr, IntPtr)</method>
        <raw>System.Int32 Banshee.Base.PlatformHacks::sigaction(Mono.Unix.Native.Signum,System.IntPtr,System.IntPtr)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>SafeUri</class>
        <caller>string FilenameToUri(string)</caller>
        <method>IntPtr g_filename_to_uri_utf8(IntPtr, IntPtr, IntPtr)</method>
        <raw>System.IntPtr Banshee.Base.SafeUri::g_filename_to_uri_utf8(System.IntPtr,System.IntPtr,System.IntPtr)</raw>
        <data>libglib-2.0-0.dll</data>
      </issue>
      <issue type="pinv">
        <class>SafeUri</class>
        <caller>string UriToFilename(string)</caller>
        <method>IntPtr g_filename_from_uri_utf8(IntPtr, IntPtr, IntPtr)</method>
        <raw>System.IntPtr Banshee.Base.SafeUri::g_filename_from_uri_utf8(System.IntPtr,System.IntPtr,System.IntPtr)</raw>
        <data>libglib-2.0-0.dll</data>
      </issue>
      <issue type="pinv">
        <class>Localization</class>
        <caller>String[] GetLanguageNames()</caller>
        <method>IntPtr g_get_language_names()</method>
        <raw>System.IntPtr Banshee.Base.Localization::g_get_language_names()</raw>
        <data>libglib-2.0-0.dll</data>
      </issue>
    </assembly>
    <assembly name="Banshee.CoverArt.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Banshee.Dap.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Banshee.Dap.Ipod.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Banshee.Dap.MassStorage.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Banshee.Dap.Mtp.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Banshee.Emusic.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Banshee.FileSystemQueue.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Banshee.InternetArchive.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Banshee.InternetRadio.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Banshee.LastFM.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Banshee.LastfmStreaming.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Banshee.MiniMode.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Banshee.MultimediaKeys.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Banshee.NotificationArea.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="30">
      <issue type="pinv">
        <class>X11NotificationArea</class>
        <caller>uint SendMessage(uint, string)</caller>
        <method>void gdk_error_trap_push()</method>
        <raw>System.Void X11NotificationArea::gdk_error_trap_push()</raw>
        <data>libgdk-x11-2.0.so.0</data>
      </issue>
      <issue type="pinv">
        <class>X11NotificationArea</class>
        <caller>uint SendMessage(uint, string)</caller>
        <method>IntPtr gdk_x11_display_get_xdisplay(IntPtr)</method>
        <raw>System.IntPtr X11NotificationArea::gdk_x11_display_get_xdisplay(System.IntPtr)</raw>
        <data>libgdk-x11-2.0.so.0</data>
      </issue>
      <issue type="pinv">
        <class>X11NotificationArea</class>
        <caller>uint SendMessage(uint, string)</caller>
        <method>IntPtr memcpy(X11NotificationArea/XClientMessageEvent/DataUnion&amp;, IntPtr, IntPtr)</method>
        <raw>System.IntPtr X11NotificationArea::memcpy(X11NotificationArea/XClientMessageEvent/DataUnion&amp;,System.IntPtr,System.IntPtr)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>X11NotificationArea</class>
        <caller>uint SendMessage(uint, string)</caller>
        <method>int XSendEvent(IntPtr, IntPtr, bool, IntPtr, X11NotificationArea/XClientMessageEvent&amp;)</method>
        <raw>System.Int32 X11NotificationArea::XSendEvent(System.IntPtr,System.IntPtr,System.Boolean,System.IntPtr,X11NotificationArea/XClientMessageEvent&amp;)</raw>
        <data>libX11.so.6</data>
      </issue>
      <issue type="pinv">
        <class>X11NotificationArea</class>
        <caller>uint SendMessage(uint, string)</caller>
        <method>int XSync(IntPtr, bool)</method>
        <raw>System.Int32 X11NotificationArea::XSync(System.IntPtr,System.Boolean)</raw>
        <data>libX11.so.6</data>
      </issue>
      <issue type="pinv">
        <class>X11NotificationArea</class>
        <caller>uint SendMessage(uint, string)</caller>
        <method>int gdk_error_trap_pop()</method>
        <raw>System.Int32 X11NotificationArea::gdk_error_trap_pop()</raw>
        <data>libgdk-x11-2.0.so.0</data>
      </issue>
      <issue type="pinv">
        <class>X11NotificationArea</class>
        <caller>void OnRealized()</caller>
        <method>IntPtr gdk_x11_display_get_xdisplay(IntPtr)</method>
        <raw>System.IntPtr X11NotificationArea::gdk_x11_display_get_xdisplay(System.IntPtr)</raw>
        <data>libgdk-x11-2.0.so.0</data>
      </issue>
      <issue type="pinv">
        <class>X11NotificationArea</class>
        <caller>void OnRealized()</caller>
        <method>IntPtr XInternAtom(IntPtr, string, bool)</method>
        <raw>System.IntPtr X11NotificationArea::XInternAtom(System.IntPtr,System.String,System.Boolean)</raw>
        <data>libX11.so.6</data>
      </issue>
      <issue type="pinv">
        <class>X11NotificationArea</class>
        <caller>void OnRealized()</caller>
        <method>IntPtr XInternAtom(IntPtr, string, bool)</method>
        <raw>System.IntPtr X11NotificationArea::XInternAtom(System.IntPtr,System.String,System.Boolean)</raw>
        <data>libX11.so.6</data>
      </issue>
      <issue type="pinv">
        <class>X11NotificationArea</class>
        <caller>void OnRealized()</caller>
        <method>IntPtr XInternAtom(IntPtr, string, bool)</method>
        <raw>System.IntPtr X11NotificationArea::XInternAtom(System.IntPtr,System.String,System.Boolean)</raw>
        <data>libX11.so.6</data>
      </issue>
      <issue type="pinv">
        <class>X11NotificationArea</class>
        <caller>void OnRealized()</caller>
        <method>IntPtr XInternAtom(IntPtr, string, bool)</method>
        <raw>System.IntPtr X11NotificationArea::XInternAtom(System.IntPtr,System.String,System.Boolean)</raw>
        <data>libX11.so.6</data>
      </issue>
      <issue type="pinv">
        <class>X11NotificationArea</class>
        <caller>void OnRealized()</caller>
        <method>IntPtr XInternAtom(IntPtr, string, bool)</method>
        <raw>System.IntPtr X11NotificationArea::XInternAtom(System.IntPtr,System.String,System.Boolean)</raw>
        <data>libX11.so.6</data>
      </issue>
      <issue type="pinv">
        <class>X11NotificationArea</class>
        <caller>void UpdateManagerWindow(bool)</caller>
        <method>IntPtr gdk_x11_display_get_xdisplay(IntPtr)</method>
        <raw>System.IntPtr X11NotificationArea::gdk_x11_display_get_xdisplay(System.IntPtr)</raw>
        <data>libgdk-x11-2.0.so.0</data>
      </issue>
      <issue type="pinv">
        <class>X11NotificationArea</class>
        <caller>void UpdateManagerWindow(bool)</caller>
        <method>void XGrabServer(IntPtr)</method>
        <raw>System.Void X11NotificationArea::XGrabServer(System.IntPtr)</raw>
        <data>libX11.so.6</data>
      </issue>
      <issue type="pinv">
        <class>X11NotificationArea</class>
        <caller>void UpdateManagerWindow(bool)</caller>
        <method>IntPtr XGetSelectionOwner(IntPtr, IntPtr)</method>
        <raw>System.IntPtr X11NotificationArea::XGetSelectionOwner(System.IntPtr,System.IntPtr)</raw>
        <data>libX11.so.6</data>
      </issue>
      <issue type="pinv">
        <class>X11NotificationArea</class>
        <caller>void UpdateManagerWindow(bool)</caller>
        <method>IntPtr XSelectInput(IntPtr, IntPtr, IntPtr)</method>
        <raw>System.IntPtr X11NotificationArea::XSelectInput(System.IntPtr,System.IntPtr,System.IntPtr)</raw>
        <data>libX11.so.6</data>
      </issue>
      <issue type="pinv">
        <class>X11NotificationArea</class>
        <caller>void UpdateManagerWindow(bool)</caller>
        <method>void XUngrabServer(IntPtr)</method>
        <raw>System.Void X11NotificationArea::XUngrabServer(System.IntPtr)</raw>
        <data>libX11.so.6</data>
      </issue>
      <issue type="pinv">
        <class>X11NotificationArea</class>
        <caller>void UpdateManagerWindow(bool)</caller>
        <method>int XFlush(IntPtr)</method>
        <raw>System.Int32 X11NotificationArea::XFlush(System.IntPtr)</raw>
        <data>libX11.so.6</data>
      </issue>
      <issue type="pinv">
        <class>X11NotificationArea</class>
        <caller>void SendManagerMessage(X11NotificationArea/SystemTrayMessage, IntPtr, uint, uint, uint)</caller>
        <method>int gdk_x11_get_server_time(IntPtr)</method>
        <raw>System.Int32 X11NotificationArea::gdk_x11_get_server_time(System.IntPtr)</raw>
        <data>libgdk-x11-2.0.so.0</data>
      </issue>
      <issue type="pinv">
        <class>X11NotificationArea</class>
        <caller>void SendManagerMessage(X11NotificationArea/SystemTrayMessage, IntPtr, uint, uint, uint)</caller>
        <method>IntPtr gdk_x11_display_get_xdisplay(IntPtr)</method>
        <raw>System.IntPtr X11NotificationArea::gdk_x11_display_get_xdisplay(System.IntPtr)</raw>
        <data>libgdk-x11-2.0.so.0</data>
      </issue>
      <issue type="pinv">
        <class>X11NotificationArea</class>
        <caller>void SendManagerMessage(X11NotificationArea/SystemTrayMessage, IntPtr, uint, uint, uint)</caller>
        <method>void gdk_error_trap_push()</method>
        <raw>System.Void X11NotificationArea::gdk_error_trap_push()</raw>
        <data>libgdk-x11-2.0.so.0</data>
      </issue>
      <issue type="pinv">
        <class>X11NotificationArea</class>
        <caller>void SendManagerMessage(X11NotificationArea/SystemTrayMessage, IntPtr, uint, uint, uint)</caller>
        <method>int XSendEvent(IntPtr, IntPtr, bool, IntPtr, X11NotificationArea/XClientMessageEvent&amp;)</method>
        <raw>System.Int32 X11NotificationArea::XSendEvent(System.IntPtr,System.IntPtr,System.Boolean,System.IntPtr,X11NotificationArea/XClientMessageEvent&amp;)</raw>
        <data>libX11.so.6</data>
      </issue>
      <issue type="pinv">
        <class>X11NotificationArea</class>
        <caller>void SendManagerMessage(X11NotificationArea/SystemTrayMessage, IntPtr, uint, uint, uint)</caller>
        <method>int XSync(IntPtr, bool)</method>
        <raw>System.Int32 X11NotificationArea::XSync(System.IntPtr,System.Boolean)</raw>
        <data>libX11.so.6</data>
      </issue>
      <issue type="pinv">
        <class>X11NotificationArea</class>
        <caller>void SendManagerMessage(X11NotificationArea/SystemTrayMessage, IntPtr, uint, uint, uint)</caller>
        <method>int gdk_error_trap_pop()</method>
        <raw>System.Int32 X11NotificationArea::gdk_error_trap_pop()</raw>
        <data>libgdk-x11-2.0.so.0</data>
      </issue>
      <issue type="pinv">
        <class>X11NotificationArea</class>
        <caller>void GetOrientationProperty()</caller>
        <method>IntPtr gdk_x11_display_get_xdisplay(IntPtr)</method>
        <raw>System.IntPtr X11NotificationArea::gdk_x11_display_get_xdisplay(System.IntPtr)</raw>
        <data>libgdk-x11-2.0.so.0</data>
      </issue>
      <issue type="pinv">
        <class>X11NotificationArea</class>
        <caller>void GetOrientationProperty()</caller>
        <method>void gdk_error_trap_push()</method>
        <raw>System.Void X11NotificationArea::gdk_error_trap_push()</raw>
        <data>libgdk-x11-2.0.so.0</data>
      </issue>
      <issue type="pinv">
        <class>X11NotificationArea</class>
        <caller>void GetOrientationProperty()</caller>
        <method>int XGetWindowProperty(IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, bool, IntPtr, IntPtr&amp;, Int32&amp;, IntPtr&amp;, IntPtr&amp;, IntPtr&amp;)</method>
        <raw>System.Int32 X11NotificationArea::XGetWindowProperty(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.Boolean,System.IntPtr,System.IntPtr&amp;,System.Int32&amp;,System.IntPtr&amp;,System.IntPtr&amp;,System.IntPtr&amp;)</raw>
        <data>libX11.so.6</data>
      </issue>
      <issue type="pinv">
        <class>X11NotificationArea</class>
        <caller>void GetOrientationProperty()</caller>
        <method>int gdk_error_trap_pop()</method>
        <raw>System.Int32 X11NotificationArea::gdk_error_trap_pop()</raw>
        <data>libgdk-x11-2.0.so.0</data>
      </issue>
      <issue type="pinv">
        <class>X11NotificationArea</class>
        <caller>void GetOrientationProperty()</caller>
        <method>int XFree(IntPtr)</method>
        <raw>System.Int32 X11NotificationArea::XFree(System.IntPtr)</raw>
        <data>libX11.so.6</data>
      </issue>
      <issue type="pinv">
        <class>X11NotificationAreaBox</class>
        <caller>void .ctor()</caller>
        <method>int gdk_x11_get_default_screen()</method>
        <raw>System.Int32 Banshee.NotificationArea.X11NotificationAreaBox::gdk_x11_get_default_screen()</raw>
        <data>libgdk-x11-2.0.so.0</data>
      </issue>
    </assembly>
    <assembly name="Banshee.NowPlaying.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Banshee.PlayerMigration.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Banshee.PlayQueue.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Banshee.Podcasting.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Banshee.Services.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="10" pinv="0">
      <issue type="miss">
        <class>NullPlayerEngine</class>
        <caller>void OpenUri(SafeUri)</caller>
        <method>void Open(Uri)</method>
        <raw>System.Void System.Windows.Media.MediaPlayer::Open(System.Uri)</raw>
      </issue>
      <issue type="miss">
        <class>NullPlayerEngine</class>
        <caller>UInt16 get_Volume()</caller>
        <method>double get_Volume()</method>
        <raw>System.Double System.Windows.Media.MediaPlayer::get_Volume()</raw>
      </issue>
      <issue type="miss">
        <class>NullPlayerEngine</class>
        <caller>void set_Volume(UInt16)</caller>
        <method>void set_Volume(double)</method>
        <raw>System.Void System.Windows.Media.MediaPlayer::set_Volume(System.Double)</raw>
      </issue>
      <issue type="miss">
        <class>NullPlayerEngine</class>
        <caller>uint get_Position()</caller>
        <method>TimeSpan get_Position()</method>
        <raw>System.TimeSpan System.Windows.Media.MediaPlayer::get_Position()</raw>
      </issue>
      <issue type="miss">
        <class>NullPlayerEngine</class>
        <caller>void set_Position(uint)</caller>
        <method>void set_Position(TimeSpan)</method>
        <raw>System.Void System.Windows.Media.MediaPlayer::set_Position(System.TimeSpan)</raw>
      </issue>
      <issue type="miss">
        <class>NullPlayerEngine</class>
        <caller>uint get_Length()</caller>
        <method>Duration get_NaturalDuration()</method>
        <raw>System.Windows.Duration System.Windows.Media.MediaPlayer::get_NaturalDuration()</raw>
      </issue>
      <issue type="miss">
        <class>NullPlayerEngine</class>
        <caller>uint get_Length()</caller>
        <method>bool get_HasTimeSpan()</method>
        <raw>System.Boolean System.Windows.Duration::get_HasTimeSpan()</raw>
      </issue>
      <issue type="miss">
        <class>NullPlayerEngine</class>
        <caller>uint get_Length()</caller>
        <method>Duration get_NaturalDuration()</method>
        <raw>System.Windows.Duration System.Windows.Media.MediaPlayer::get_NaturalDuration()</raw>
      </issue>
      <issue type="miss">
        <class>NullPlayerEngine</class>
        <caller>uint get_Length()</caller>
        <method>TimeSpan get_TimeSpan()</method>
        <raw>System.TimeSpan System.Windows.Duration::get_TimeSpan()</raw>
      </issue>
      <issue type="miss">
        <class>NullPlayerEngine</class>
        <caller>void .ctor()</caller>
        <method>void .ctor()</method>
        <raw>System.Void System.Windows.Media.MediaPlayer::.ctor()</raw>
      </issue>
    </assembly>
    <assembly name="Banshee.ThickClient.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Banshee.WebBrowser.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="19">
      <issue type="pinv">
        <class>OssiferSession</class>
        <caller>void Initialize()</caller>
        <method>IntPtr ossifer_session_initialize(IntPtr, OssiferSession/CookieJarChangedCallback)</method>
        <raw>System.IntPtr Banshee.WebBrowser.OssiferSession::ossifer_session_initialize(System.IntPtr,Banshee.WebBrowser.OssiferSession/CookieJarChangedCallback)</raw>
        <data>ossifer</data>
      </issue>
      <issue type="pinv">
        <class>OssiferSession</class>
        <caller>void SetCookie(string, string, string, string, TimeSpan)</caller>
        <method>void ossifer_session_set_cookie(IntPtr, IntPtr, IntPtr, IntPtr, int)</method>
        <raw>System.Void Banshee.WebBrowser.OssiferSession::ossifer_session_set_cookie(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.Int32)</raw>
        <data>ossifer</data>
      </issue>
      <issue type="pinv">
        <class>OssiferSession</class>
        <caller>OssiferCookie GetCookie(string, string, string)</caller>
        <method>IntPtr ossifer_session_get_cookie(IntPtr, IntPtr, IntPtr)</method>
        <raw>System.IntPtr Banshee.WebBrowser.OssiferSession::ossifer_session_get_cookie(System.IntPtr,System.IntPtr,System.IntPtr)</raw>
        <data>ossifer</data>
      </issue>
      <issue type="pinv">
        <class>OssiferSession</class>
        <caller>OssiferCookie GetCookie(string, string, string)</caller>
        <method>void ossifer_cookie_free(IntPtr)</method>
        <raw>System.Void Banshee.WebBrowser.OssiferSession::ossifer_cookie_free(System.IntPtr)</raw>
        <data>ossifer</data>
      </issue>
      <issue type="pinv">
        <class>OssiferSession</class>
        <caller>bool DeleteCookie(string, string, string)</caller>
        <method>bool ossifer_session_delete_cookie(IntPtr, IntPtr, IntPtr)</method>
        <raw>System.Boolean Banshee.WebBrowser.OssiferSession::ossifer_session_delete_cookie(System.IntPtr,System.IntPtr,System.IntPtr)</raw>
        <data>ossifer</data>
      </issue>
      <issue type="pinv">
        <class>OssiferWebView</class>
        <caller>GType get_GType()</caller>
        <method>IntPtr ossifer_web_view_get_type()</method>
        <raw>System.IntPtr Banshee.WebBrowser.OssiferWebView::ossifer_web_view_get_type()</raw>
        <data>ossifer</data>
      </issue>
      <issue type="pinv">
        <class>OssiferWebView</class>
        <caller>void LoadUri(string)</caller>
        <method>IntPtr ossifer_web_view_load_uri(IntPtr, IntPtr)</method>
        <raw>System.IntPtr Banshee.WebBrowser.OssiferWebView::ossifer_web_view_load_uri(System.IntPtr,System.IntPtr)</raw>
        <data>ossifer</data>
      </issue>
      <issue type="pinv">
        <class>OssiferWebView</class>
        <caller>void LoadString(string, string, string, string)</caller>
        <method>void ossifer_web_view_load_string(IntPtr, IntPtr, IntPtr, IntPtr, IntPtr)</method>
        <raw>System.Void Banshee.WebBrowser.OssiferWebView::ossifer_web_view_load_string(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</raw>
        <data>ossifer</data>
      </issue>
      <issue type="pinv">
        <class>OssiferWebView</class>
        <caller>bool get_CanGoForward()</caller>
        <method>bool ossifer_web_view_can_go_forward(IntPtr)</method>
        <raw>System.Boolean Banshee.WebBrowser.OssiferWebView::ossifer_web_view_can_go_forward(System.IntPtr)</raw>
        <data>ossifer</data>
      </issue>
      <issue type="pinv">
        <class>OssiferWebView</class>
        <caller>bool get_CanGoBack()</caller>
        <method>bool ossifer_web_view_can_go_back(IntPtr)</method>
        <raw>System.Boolean Banshee.WebBrowser.OssiferWebView::ossifer_web_view_can_go_back(System.IntPtr)</raw>
        <data>ossifer</data>
      </issue>
      <issue type="pinv">
        <class>OssiferWebView</class>
        <caller>void GoForward()</caller>
        <method>void ossifer_web_view_go_forward(IntPtr)</method>
        <raw>System.Void Banshee.WebBrowser.OssiferWebView::ossifer_web_view_go_forward(System.IntPtr)</raw>
        <data>ossifer</data>
      </issue>
      <issue type="pinv">
        <class>OssiferWebView</class>
        <caller>void GoBack()</caller>
        <method>void ossifer_web_view_go_back(IntPtr)</method>
        <raw>System.Void Banshee.WebBrowser.OssiferWebView::ossifer_web_view_go_back(System.IntPtr)</raw>
        <data>ossifer</data>
      </issue>
      <issue type="pinv">
        <class>OssiferWebView</class>
        <caller>void Reload(bool)</caller>
        <method>void ossifer_web_view_reload_bypass_cache(IntPtr)</method>
        <raw>System.Void Banshee.WebBrowser.OssiferWebView::ossifer_web_view_reload_bypass_cache(System.IntPtr)</raw>
        <data>ossifer</data>
      </issue>
      <issue type="pinv">
        <class>OssiferWebView</class>
        <caller>void Reload(bool)</caller>
        <method>void ossifer_web_view_reload(IntPtr)</method>
        <raw>System.Void Banshee.WebBrowser.OssiferWebView::ossifer_web_view_reload(System.IntPtr)</raw>
        <data>ossifer</data>
      </issue>
      <issue type="pinv">
        <class>OssiferWebView</class>
        <caller>void ExecuteScript(string)</caller>
        <method>void ossifer_web_view_execute_script(IntPtr, IntPtr)</method>
        <raw>System.Void Banshee.WebBrowser.OssiferWebView::ossifer_web_view_execute_script(System.IntPtr,System.IntPtr)</raw>
        <data>ossifer</data>
      </issue>
      <issue type="pinv">
        <class>OssiferWebView</class>
        <caller>string get_Uri()</caller>
        <method>IntPtr ossifer_web_view_get_uri(IntPtr)</method>
        <raw>System.IntPtr Banshee.WebBrowser.OssiferWebView::ossifer_web_view_get_uri(System.IntPtr)</raw>
        <data>ossifer</data>
      </issue>
      <issue type="pinv">
        <class>OssiferWebView</class>
        <caller>string get_Title()</caller>
        <method>IntPtr ossifer_web_view_get_title(IntPtr)</method>
        <raw>System.IntPtr Banshee.WebBrowser.OssiferWebView::ossifer_web_view_get_title(System.IntPtr)</raw>
        <data>ossifer</data>
      </issue>
      <issue type="pinv">
        <class>OssiferWebView</class>
        <caller>OssiferLoadStatus get_LoadStatus()</caller>
        <method>OssiferLoadStatus ossifer_web_view_get_load_status(IntPtr)</method>
        <raw>Banshee.WebBrowser.OssiferLoadStatus Banshee.WebBrowser.OssiferWebView::ossifer_web_view_get_load_status(System.IntPtr)</raw>
        <data>ossifer</data>
      </issue>
      <issue type="pinv">
        <class>OssiferWebView</class>
        <caller>void .ctor()</caller>
        <method>void ossifer_web_view_set_callbacks(IntPtr, OssiferWebView/Callbacks)</method>
        <raw>System.Void Banshee.WebBrowser.OssiferWebView::ossifer_web_view_set_callbacks(System.IntPtr,Banshee.WebBrowser.OssiferWebView/Callbacks)</raw>
        <data>ossifer</data>
      </issue>
    </assembly>
    <assembly name="Banshee.Widgets.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="4">
      <issue type="pinv">
        <class>VolumeButton</class>
        <caller>void OnWidgetEventAfter(Object, WidgetEventAfterArgs)</caller>
        <method>void g_signal_stop_emission_by_name(IntPtr, string)</method>
        <raw>System.Void Bacon.VolumeButton::g_signal_stop_emission_by_name(System.IntPtr,System.String)</raw>
        <data>libgobject-2.0-0.dll</data>
      </issue>
      <issue type="pinv">
        <class>VolumeButton</class>
        <caller>void OnWidgetEventAfter(Object, WidgetEventAfterArgs)</caller>
        <method>void g_signal_stop_emission_by_name_fallback(IntPtr, string)</method>
        <raw>System.Void Bacon.VolumeButton::g_signal_stop_emission_by_name_fallback(System.IntPtr,System.String)</raw>
        <data>libgobject-2.0-0.dll</data>
      </issue>
      <issue type="pinv">
        <class>VolumeButton/VolumeScale</class>
        <caller>int get_MinSliderSize()</caller>
        <method>void g_type_query(IntPtr, IntPtr)</method>
        <raw>System.Void Bacon.VolumeButton/VolumeScale::g_type_query(System.IntPtr,System.IntPtr)</raw>
        <data>libgobject-2.0-0.dll</data>
      </issue>
      <issue type="pinv">
        <class>VolumeButton/VolumeScale</class>
        <caller>int get_MinSliderSize()</caller>
        <method>void g_type_query_fallback(IntPtr, IntPtr)</method>
        <raw>System.Void Bacon.VolumeButton/VolumeScale::g_type_query_fallback(System.IntPtr,System.IntPtr)</raw>
        <data>libgobject-2.0-0.dll</data>
      </issue>
    </assembly>
    <assembly name="Banshee.Windows.dll" version="1.0.0.0" runtime="2.0" todo="1" niex="0" miss="15" pinv="0">
      <issue type="todo">
        <class>HardwareManager/&lt;GetAllBlockDevices&gt;d__3`1</class>
        <caller>bool MoveNext()</caller>
        <method>DriveInfo[] GetDrives()</method>
        <raw>System.IO.DriveInfo[] System.IO.DriveInfo::GetDrives()</raw>
        <data>Currently only implemented on Mono/Linux</data>
      </issue>
      <issue type="miss">
        <class>PlayerEngine</class>
        <caller>void Initialize()</caller>
        <method>void .ctor()</method>
        <raw>System.Void System.Windows.Media.MediaPlayer::.ctor()</raw>
      </issue>
      <issue type="miss">
        <class>PlayerEngine</class>
        <caller>void Initialize()</caller>
        <method>void add_MediaEnded(EventHandler)</method>
        <raw>System.Void System.Windows.Media.MediaPlayer::add_MediaEnded(System.EventHandler)</raw>
      </issue>
      <issue type="miss">
        <class>PlayerEngine</class>
        <caller>void OpenUri(SafeUri)</caller>
        <method>void Close()</method>
        <raw>System.Void System.Windows.Media.MediaPlayer::Close()</raw>
      </issue>
      <issue type="miss">
        <class>PlayerEngine</class>
        <caller>void OpenUri(SafeUri)</caller>
        <method>void Open(Uri)</method>
        <raw>System.Void System.Windows.Media.MediaPlayer::Open(System.Uri)</raw>
      </issue>
      <issue type="miss">
        <class>PlayerEngine</class>
        <caller>void Pause()</caller>
        <method>void Pause()</method>
        <raw>System.Void System.Windows.Media.MediaPlayer::Pause()</raw>
      </issue>
      <issue type="miss">
        <class>PlayerEngine</class>
        <caller>UInt16 get_Volume()</caller>
        <method>double get_Volume()</method>
        <raw>System.Double System.Windows.Media.MediaPlayer::get_Volume()</raw>
      </issue>
      <issue type="miss">
        <class>PlayerEngine</class>
        <caller>void set_Volume(UInt16)</caller>
        <method>void set_Volume(double)</method>
        <raw>System.Void System.Windows.Media.MediaPlayer::set_Volume(System.Double)</raw>
      </issue>
      <issue type="miss">
        <class>PlayerEngine</class>
        <caller>uint get_Position()</caller>
        <method>TimeSpan get_Position()</method>
        <raw>System.TimeSpan System.Windows.Media.MediaPlayer::get_Position()</raw>
      </issue>
      <issue type="miss">
        <class>PlayerEngine</class>
        <caller>void set_Position(uint)</caller>
        <method>void set_Position(TimeSpan)</method>
        <raw>System.Void System.Windows.Media.MediaPlayer::set_Position(System.TimeSpan)</raw>
      </issue>
      <issue type="miss">
        <class>PlayerEngine</class>
        <caller>void &lt;Initialize&gt;b__0()</caller>
        <method>void .ctor()</method>
        <raw>System.Void System.Windows.Media.MediaPlayer::.ctor()</raw>
      </issue>
      <issue type="miss">
        <class>PlayerEngine</class>
        <caller>void &lt;Play&gt;b__2()</caller>
        <method>void Play()</method>
        <raw>System.Void System.Windows.Media.MediaPlayer::Play()</raw>
      </issue>
      <issue type="miss">
        <class>PlayerEngine/&lt;&gt;c__DisplayClass4</class>
        <caller>void &lt;get_Length&gt;b__3()</caller>
        <method>Duration get_NaturalDuration()</method>
        <raw>System.Windows.Duration System.Windows.Media.MediaPlayer::get_NaturalDuration()</raw>
      </issue>
      <issue type="miss">
        <class>PlayerEngine/&lt;&gt;c__DisplayClass4</class>
        <caller>void &lt;get_Length&gt;b__3()</caller>
        <method>bool get_HasTimeSpan()</method>
        <raw>System.Boolean System.Windows.Duration::get_HasTimeSpan()</raw>
      </issue>
      <issue type="miss">
        <class>PlayerEngine/&lt;&gt;c__DisplayClass4</class>
        <caller>void &lt;get_Length&gt;b__3()</caller>
        <method>Duration get_NaturalDuration()</method>
        <raw>System.Windows.Duration System.Windows.Media.MediaPlayer::get_NaturalDuration()</raw>
      </issue>
      <issue type="miss">
        <class>PlayerEngine/&lt;&gt;c__DisplayClass4</class>
        <caller>void &lt;get_Length&gt;b__3()</caller>
        <method>TimeSpan get_TimeSpan()</method>
        <raw>System.TimeSpan System.Windows.Duration::get_TimeSpan()</raw>
      </issue>
    </assembly>
    <assembly name="Hyena.Data.Sqlite.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Hyena.dll" version="0.0.0.0" runtime="2.0" todo="2" niex="0" miss="0" pinv="4">
      <issue type="todo">
        <class>Layout</class>
        <caller>int get_TerminalWidth()</caller>
        <method>int get_WindowWidth()</method>
        <raw>System.Int32 System.Console::get_WindowWidth()</raw>
        <data>Only works on windows</data>
      </issue>
      <issue type="todo">
        <class>Layout</class>
        <caller>int get_TerminalWidth()</caller>
        <method>int get_WindowWidth()</method>
        <raw>System.Int32 System.Console::get_WindowWidth()</raw>
        <data>Only works on windows</data>
      </issue>
      <issue type="pinv">
        <class>ApplicationContext</class>
        <caller>void SetProcessName(string)</caller>
        <method>int prctl(int, Byte[], IntPtr, IntPtr, IntPtr)</method>
        <raw>System.Int32 Hyena.ApplicationContext::prctl(System.Int32,System.Byte[],System.IntPtr,System.IntPtr,System.IntPtr)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>ApplicationContext</class>
        <caller>void SetProcessName(string)</caller>
        <method>void setproctitle(Byte[], Byte[])</method>
        <raw>System.Void Hyena.ApplicationContext::setproctitle(System.Byte[],System.Byte[])</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>ConsoleCrayon</class>
        <caller>bool isatty(int)</caller>
        <method>int _isatty(int)</method>
        <raw>System.Int32 Hyena.ConsoleCrayon::_isatty(System.Int32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>PlatformDetection</class>
        <caller>void .cctor()</caller>
        <method>int uname(IntPtr)</method>
        <raw>System.Int32 Hyena.PlatformDetection::uname(System.IntPtr)</raw>
        <data>libc</data>
      </issue>
    </assembly>
    <assembly name="Hyena.Gui.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="16">
      <issue type="pinv">
        <class>PixbufImageSurface</class>
        <caller>void SetDestroyFunc()</caller>
        <method>Status cairo_surface_set_user_data(IntPtr, Int32&amp;, IntPtr, PixbufImageSurface/cairo_destroy_func_t)</method>
        <raw>Cairo.Status Hyena.Gui.PixbufImageSurface::cairo_surface_set_user_data(System.IntPtr,System.Int32&amp;,System.IntPtr,Hyena.Gui.PixbufImageSurface/cairo_destroy_func_t)</raw>
        <data>libcairo-2.dll</data>
      </issue>
      <issue type="pinv">
        <class>PangoCairoHelper</class>
        <caller>void ShowLayout(Context, Layout)</caller>
        <method>void pango_cairo_show_layout(IntPtr, IntPtr)</method>
        <raw>System.Void Hyena.Gui.PangoCairoHelper::pango_cairo_show_layout(System.IntPtr,System.IntPtr)</raw>
        <data>libpangocairo-1.0-0.dll</data>
      </issue>
      <issue type="pinv">
        <class>PangoCairoHelper</class>
        <caller>Layout CreateLayout(Context)</caller>
        <method>IntPtr pango_cairo_create_layout(IntPtr)</method>
        <raw>System.IntPtr Hyena.Gui.PangoCairoHelper::pango_cairo_create_layout(System.IntPtr)</raw>
        <data>libpangocairo-1.0-0.dll</data>
      </issue>
      <issue type="pinv">
        <class>PangoCairoHelper</class>
        <caller>void LayoutPath(Context, Layout, bool)</caller>
        <method>void pango_cairo_layout_path(IntPtr, IntPtr)</method>
        <raw>System.Void Hyena.Gui.PangoCairoHelper::pango_cairo_layout_path(System.IntPtr,System.IntPtr)</raw>
        <data>libpangocairo-1.0-0.dll</data>
      </issue>
      <issue type="pinv">
        <class>PangoCairoHelper</class>
        <caller>void ContextSetResolution(Context, double)</caller>
        <method>void pango_cairo_context_set_resolution(IntPtr, double)</method>
        <raw>System.Void Hyena.Gui.PangoCairoHelper::pango_cairo_context_set_resolution(System.IntPtr,System.Double)</raw>
        <data>libpangocairo-1.0-0.dll</data>
      </issue>
      <issue type="pinv">
        <class>PangoCairoHelper</class>
        <caller>Context LayoutGetContext(Layout)</caller>
        <method>IntPtr pango_layout_get_context(IntPtr)</method>
        <raw>System.IntPtr Hyena.Gui.PangoCairoHelper::pango_layout_get_context(System.IntPtr)</raw>
        <data>libpangocairo-1.0-0.dll</data>
      </issue>
      <issue type="pinv">
        <class>CompositeUtils</class>
        <caller>Colormap GetRgbaColormap(Screen)</caller>
        <method>IntPtr gdk_screen_get_rgba_colormap(IntPtr)</method>
        <raw>System.IntPtr Hyena.Gui.CompositeUtils::gdk_screen_get_rgba_colormap(System.IntPtr)</raw>
        <data>libgdk-win32-2.0-0.dll</data>
      </issue>
      <issue type="pinv">
        <class>CompositeUtils</class>
        <caller>Visual GetRgbaVisual(Screen)</caller>
        <method>IntPtr gdk_screen_get_rgba_visual(IntPtr)</method>
        <raw>System.IntPtr Hyena.Gui.CompositeUtils::gdk_screen_get_rgba_visual(System.IntPtr)</raw>
        <data>libgdk-win32-2.0-0.dll</data>
      </issue>
      <issue type="pinv">
        <class>CompositeUtils</class>
        <caller>void ChangeProperty(Window, Atom, Atom, PropMode, UInt32[])</caller>
        <method>void gdk_property_change(IntPtr, IntPtr, IntPtr, int, int, UInt32[], int)</method>
        <raw>System.Void Hyena.Gui.CompositeUtils::gdk_property_change(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.UInt32[],System.Int32)</raw>
        <data>libgdk-win32-2.0-0.dll</data>
      </issue>
      <issue type="pinv">
        <class>CompositeUtils</class>
        <caller>void ChangeProperty(Window, Atom, Atom, PropMode, Byte[])</caller>
        <method>void gdk_property_change(IntPtr, IntPtr, IntPtr, int, int, Byte[], int)</method>
        <raw>System.Void Hyena.Gui.CompositeUtils::gdk_property_change(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Byte[],System.Int32)</raw>
        <data>libgdk-win32-2.0-0.dll</data>
      </issue>
      <issue type="pinv">
        <class>CompositeUtils</class>
        <caller>bool SupportsHint(Screen, string)</caller>
        <method>bool gdk_x11_screen_supports_net_wm_hint(IntPtr, IntPtr)</method>
        <raw>System.Boolean Hyena.Gui.CompositeUtils::gdk_x11_screen_supports_net_wm_hint(System.IntPtr,System.IntPtr)</raw>
        <data>libgdk-win32-2.0-0.dll</data>
      </issue>
      <issue type="pinv">
        <class>CompositeUtils</class>
        <caller>bool IsComposited(Screen)</caller>
        <method>bool gdk_screen_is_composited(IntPtr)</method>
        <raw>System.Boolean Hyena.Gui.CompositeUtils::gdk_screen_is_composited(System.IntPtr)</raw>
        <data>libgdk-win32-2.0-0.dll</data>
      </issue>
      <issue type="pinv">
        <class>CompositeUtils</class>
        <caller>void InputShapeCombineMask(Widget, Pixmap, int, int)</caller>
        <method>void gtk_widget_input_shape_combine_mask(IntPtr, IntPtr, int, int)</method>
        <raw>System.Void Hyena.Gui.CompositeUtils::gtk_widget_input_shape_combine_mask(System.IntPtr,System.IntPtr,System.Int32,System.Int32)</raw>
        <data>libgtk-win32-2.0-0.dll</data>
      </issue>
      <issue type="pinv">
        <class>GtkUtilities</class>
        <caller>bool ShowUri(Screen, string, uint)</caller>
        <method>bool gtk_show_uri(IntPtr, IntPtr, uint, IntPtr&amp;)</method>
        <raw>System.Boolean Hyena.Gui.GtkUtilities::gtk_show_uri(System.IntPtr,System.IntPtr,System.UInt32,System.IntPtr&amp;)</raw>
        <data>libgtk-win32-2.0-0.dll</data>
      </issue>
      <issue type="pinv">
        <class>CairoExtensions</class>
        <caller>void PushGroup(Context)</caller>
        <method>void cairo_push_group(IntPtr)</method>
        <raw>System.Void Hyena.Gui.CairoExtensions::cairo_push_group(System.IntPtr)</raw>
        <data>libcairo-2.dll</data>
      </issue>
      <issue type="pinv">
        <class>CairoExtensions</class>
        <caller>void PopGroupToSource(Context)</caller>
        <method>void cairo_pop_group_to_source(IntPtr)</method>
        <raw>System.Void Hyena.Gui.CairoExtensions::cairo_pop_group_to_source(System.IntPtr)</raw>
        <data>libcairo-2.dll</data>
      </issue>
    </assembly>
    <assembly name="ICSharpCode.SharpZipLib.dll" version="2.84.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="ipod-sharp-ui.dll" version="0.0.1.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="ipod-sharp.dll" version="0.0.1.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="1">
      <issue type="pinv">
        <class>TrackDatabase</class>
        <caller>void Save()</caller>
        <method>int sync()</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sync()</raw>
        <data>MonoPosixHelper</data>
      </issue>
    </assembly>
    <assembly name="Lastfm.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Lastfm.Gui.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="MediaFoundation.dll" version="1.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="7">
      <issue type="pinv">
        <class>PropVariant</class>
        <caller>void Copy(PropVariant)</caller>
        <method>void PropVariantCopy(PropVariant, ConstPropVariant)</method>
        <raw>System.Void MediaFoundation.Misc.PropVariant::PropVariantCopy(MediaFoundation.Misc.PropVariant,MediaFoundation.Misc.ConstPropVariant)</raw>
        <data>ole32.dll</data>
      </issue>
      <issue type="pinv">
        <class>PropVariant</class>
        <caller>void Clear()</caller>
        <method>void PropVariantClear(PropVariant)</method>
        <raw>System.Void MediaFoundation.Misc.PropVariant::PropVariantClear(MediaFoundation.Misc.PropVariant)</raw>
        <data>ole32.dll</data>
      </issue>
      <issue type="pinv">
        <class>PropVariant</class>
        <caller>void .ctor(ConstPropVariant)</caller>
        <method>void PropVariantCopy(PropVariant, ConstPropVariant)</method>
        <raw>System.Void MediaFoundation.Misc.PropVariant::PropVariantCopy(MediaFoundation.Misc.PropVariant,MediaFoundation.Misc.ConstPropVariant)</raw>
        <data>ole32.dll</data>
      </issue>
      <issue type="pinv">
        <class>MFError</class>
        <caller>string GetErrorText(int)</caller>
        <method>int FormatMessage(MFError/FormatMessageFlags, IntPtr, int, int, IntPtr&amp;, int, IntPtr)</method>
        <raw>System.Int32 MediaFoundation.Misc.MFError::FormatMessage(MediaFoundation.Misc.MFError/FormatMessageFlags,System.IntPtr,System.Int32,System.Int32,System.IntPtr&amp;,System.Int32,System.IntPtr)</raw>
        <data>kernel32.dll</data>
      </issue>
      <issue type="pinv">
        <class>MFError</class>
        <caller>string GetErrorText(int)</caller>
        <method>IntPtr LoadLibraryEx(string, IntPtr, MFError/LoadLibraryExFlags)</method>
        <raw>System.IntPtr MediaFoundation.Misc.MFError::LoadLibraryEx(System.String,System.IntPtr,MediaFoundation.Misc.MFError/LoadLibraryExFlags)</raw>
        <data>kernel32.dll</data>
      </issue>
      <issue type="pinv">
        <class>MFError</class>
        <caller>string GetErrorText(int)</caller>
        <method>int FormatMessage(MFError/FormatMessageFlags, IntPtr, int, int, IntPtr&amp;, int, IntPtr)</method>
        <raw>System.Int32 MediaFoundation.Misc.MFError::FormatMessage(MediaFoundation.Misc.MFError/FormatMessageFlags,System.IntPtr,System.Int32,System.Int32,System.IntPtr&amp;,System.Int32,System.IntPtr)</raw>
        <data>kernel32.dll</data>
      </issue>
      <issue type="pinv">
        <class>MFError</class>
        <caller>string GetErrorText(int)</caller>
        <method>IntPtr LocalFree(IntPtr)</method>
        <raw>System.IntPtr MediaFoundation.Misc.MFError::LocalFree(System.IntPtr)</raw>
        <data>kernel32.dll</data>
      </issue>
    </assembly>
    <assembly name="Migo.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Mono.Addins.CecilReflector.dll" version="0.4.0.0" runtime="1.1" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Mono.Addins.dll" version="0.4.0.0" runtime="1.1" todo="0" niex="0" miss="0" pinv="4">
      <issue type="pinv">
        <class>GettextDomain</class>
        <caller>void Init(string, string)</caller>
        <method>IntPtr bindtextdomain(IntPtr, IntPtr)</method>
        <raw>System.IntPtr Mono.Addins.Localization.GettextDomain::bindtextdomain(System.IntPtr,System.IntPtr)</raw>
        <data>intl</data>
      </issue>
      <issue type="pinv">
        <class>GettextDomain</class>
        <caller>void Init(string, string)</caller>
        <method>IntPtr bind_textdomain_codeset(IntPtr, IntPtr)</method>
        <raw>System.IntPtr Mono.Addins.Localization.GettextDomain::bind_textdomain_codeset(System.IntPtr,System.IntPtr)</raw>
        <data>intl</data>
      </issue>
      <issue type="pinv">
        <class>GettextDomain</class>
        <caller>string GetString(string)</caller>
        <method>IntPtr dgettext(IntPtr, IntPtr)</method>
        <raw>System.IntPtr Mono.Addins.Localization.GettextDomain::dgettext(System.IntPtr,System.IntPtr)</raw>
        <data>intl</data>
      </issue>
      <issue type="pinv">
        <class>GettextDomain</class>
        <caller>string GetPluralString(string, string, int)</caller>
        <method>IntPtr dngettext(IntPtr, IntPtr, IntPtr, int)</method>
        <raw>System.IntPtr Mono.Addins.Localization.GettextDomain::dngettext(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32)</raw>
        <data>intl</data>
      </issue>
    </assembly>
    <assembly name="Mono.Addins.Gui.dll" version="0.4.0.0" runtime="1.1" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Mono.Addins.Setup.dll" version="0.4.0.0" runtime="1.1" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Mono.Data.Sqlite.dll" version="0.0.0.0" runtime="2.0" todo="3" niex="5" miss="0" pinv="76">
      <issue type="todo">
        <class>SqliteEnlistment</class>
        <caller>void Prepare(PreparingEnlistment)</caller>
        <method>void Prepared()</method>
        <raw>System.Void System.Transactions.PreparingEnlistment::Prepared()</raw>
        <data />
      </issue>
      <issue type="todo">
        <class>SqliteEnlistment</class>
        <caller>void .ctor(SqliteConnection, Transaction)</caller>
        <method>Enlistment EnlistVolatile(IEnlistmentNotification, EnlistmentOptions)</method>
        <raw>System.Transactions.Enlistment System.Transactions.Transaction::EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)</raw>
        <data>EnlistmentOptions being ignored</data>
      </issue>
      <issue type="todo">
        <class>SqliteConnectionStringBuilder</class>
        <caller>void Initialize(string)</caller>
        <method>void GetProperties(Hashtable)</method>
        <raw>System.Void System.Data.Common.DbConnectionStringBuilder::GetProperties(System.Collections.Hashtable)</raw>
        <data />
      </issue>
      <issue type="niex">
        <class>SqliteDataReader</class>
        <caller>DataTable GetSchemaTable(bool, bool)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>SqliteDataReader</class>
        <caller>DataTable GetSchemaTable(bool, bool)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>SqliteConnection</class>
        <caller>DataTable GetSchema()</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>SqliteConnection</class>
        <caller>DataTable GetSchema(string)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>SqliteConnectionStringBuilder</class>
        <caller>void Initialize(string)</caller>
        <method>void GetProperties(Hashtable)</method>
        <raw>System.Void System.Data.Common.DbConnectionStringBuilder::GetProperties(System.Collections.Hashtable)</raw>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>void Close()</caller>
        <method>int sqlite3_close(IntPtr)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_close(System.IntPtr)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>void Cancel()</caller>
        <method>void sqlite3_interrupt(IntPtr)</method>
        <raw>System.Void Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_interrupt(System.IntPtr)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>string get_Version()</caller>
        <method>IntPtr sqlite3_libversion()</method>
        <raw>System.IntPtr Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_libversion()</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>int get_Changes()</caller>
        <method>int sqlite3_changes(IntPtr)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_changes(System.IntPtr)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>void Open(string)</caller>
        <method>int sqlite3_open(Byte[], IntPtr&amp;)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_open(System.Byte[],System.IntPtr&amp;)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>void SetTimeout(int)</caller>
        <method>int sqlite3_busy_timeout(IntPtr, int)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_busy_timeout(System.IntPtr,System.Int32)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>bool Step(SqliteStatement)</caller>
        <method>int sqlite3_step(IntPtr)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_step(System.IntPtr)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>bool Step(SqliteStatement)</caller>
        <method>void sqlite3_sleep(uint)</method>
        <raw>System.Void Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_sleep(System.UInt32)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>void FinalizeStatement(SqliteStatement)</caller>
        <method>int sqlite3_finalize(IntPtr)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_finalize(System.IntPtr)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>int Reset(SqliteStatement)</caller>
        <method>int sqlite3_reset(IntPtr)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_reset(System.IntPtr)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>string SqliteLastError()</caller>
        <method>IntPtr sqlite3_errmsg(IntPtr)</method>
        <raw>System.IntPtr Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_errmsg(System.IntPtr)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>SqliteStatement Prepare(string, SqliteStatement, String&amp;)</caller>
        <method>int sqlite3_prepare_v2(IntPtr, IntPtr, int, IntPtr&amp;, IntPtr&amp;)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_prepare_v2(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr&amp;,System.IntPtr&amp;)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>SqliteStatement Prepare(string, SqliteStatement, String&amp;)</caller>
        <method>int sqlite3_prepare(IntPtr, IntPtr, int, IntPtr&amp;, IntPtr&amp;)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_prepare(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr&amp;,System.IntPtr&amp;)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>void Bind_Double(SqliteStatement, int, double)</caller>
        <method>int sqlite3_bind_double(IntPtr, int, double)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_bind_double(System.IntPtr,System.Int32,System.Double)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>void Bind_Int32(SqliteStatement, int, int)</caller>
        <method>int sqlite3_bind_int(IntPtr, int, int)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_bind_int(System.IntPtr,System.Int32,System.Int32)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>void Bind_Int64(SqliteStatement, int, Int64)</caller>
        <method>int sqlite3_bind_int64(IntPtr, int, Int64)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_bind_int64(System.IntPtr,System.Int32,System.Int64)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>void Bind_Text(SqliteStatement, int, string)</caller>
        <method>int sqlite3_bind_text(IntPtr, int, Byte[], int, IntPtr)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_bind_text(System.IntPtr,System.Int32,System.Byte[],System.Int32,System.IntPtr)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>void Bind_DateTime(SqliteStatement, int, DateTime)</caller>
        <method>int sqlite3_bind_text(IntPtr, int, Byte[], int, IntPtr)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_bind_text(System.IntPtr,System.Int32,System.Byte[],System.Int32,System.IntPtr)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>void Bind_Blob(SqliteStatement, int, Byte[])</caller>
        <method>int sqlite3_bind_blob(IntPtr, int, Byte[], int, IntPtr)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_bind_blob(System.IntPtr,System.Int32,System.Byte[],System.Int32,System.IntPtr)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>void Bind_Null(SqliteStatement, int)</caller>
        <method>int sqlite3_bind_null(IntPtr, int)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_bind_null(System.IntPtr,System.Int32)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>int Bind_ParamCount(SqliteStatement)</caller>
        <method>int sqlite3_bind_parameter_count(IntPtr)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_bind_parameter_count(System.IntPtr)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>string Bind_ParamName(SqliteStatement, int)</caller>
        <method>IntPtr sqlite3_bind_parameter_name(IntPtr, int)</method>
        <raw>System.IntPtr Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_bind_parameter_name(System.IntPtr,System.Int32)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>int Bind_ParamIndex(SqliteStatement, string)</caller>
        <method>int sqlite3_bind_parameter_index(IntPtr, Byte[])</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_bind_parameter_index(System.IntPtr,System.Byte[])</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>int ColumnCount(SqliteStatement)</caller>
        <method>int sqlite3_column_count(IntPtr)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_column_count(System.IntPtr)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>string ColumnName(SqliteStatement, int)</caller>
        <method>IntPtr sqlite3_column_name(IntPtr, int)</method>
        <raw>System.IntPtr Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_column_name(System.IntPtr,System.Int32)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>TypeAffinity ColumnAffinity(SqliteStatement, int)</caller>
        <method>TypeAffinity sqlite3_column_type(IntPtr, int)</method>
        <raw>Mono.Data.Sqlite.TypeAffinity Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_column_type(System.IntPtr,System.Int32)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>string ColumnType(SqliteStatement, int, TypeAffinity&amp;)</caller>
        <method>IntPtr sqlite3_column_decltype(IntPtr, int)</method>
        <raw>System.IntPtr Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_column_decltype(System.IntPtr,System.Int32)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>string ColumnOriginalName(SqliteStatement, int)</caller>
        <method>IntPtr sqlite3_column_origin_name(IntPtr, int)</method>
        <raw>System.IntPtr Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_column_origin_name(System.IntPtr,System.Int32)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>string ColumnDatabaseName(SqliteStatement, int)</caller>
        <method>IntPtr sqlite3_column_database_name(IntPtr, int)</method>
        <raw>System.IntPtr Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_column_database_name(System.IntPtr,System.Int32)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>string ColumnTableName(SqliteStatement, int)</caller>
        <method>IntPtr sqlite3_column_table_name(IntPtr, int)</method>
        <raw>System.IntPtr Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_column_table_name(System.IntPtr,System.Int32)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>void ColumnMetaData(string, string, string, String&amp;, String&amp;, Boolean&amp;, Boolean&amp;, Boolean&amp;)</caller>
        <method>int sqlite3_table_column_metadata(IntPtr, Byte[], Byte[], Byte[], IntPtr&amp;, IntPtr&amp;, Int32&amp;, Int32&amp;, Int32&amp;)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_table_column_metadata(System.IntPtr,System.Byte[],System.Byte[],System.Byte[],System.IntPtr&amp;,System.IntPtr&amp;,System.Int32&amp;,System.Int32&amp;,System.Int32&amp;)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>double GetDouble(SqliteStatement, int)</caller>
        <method>double sqlite3_column_double(IntPtr, int)</method>
        <raw>System.Double Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_column_double(System.IntPtr,System.Int32)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>int GetInt32(SqliteStatement, int)</caller>
        <method>int sqlite3_column_int(IntPtr, int)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_column_int(System.IntPtr,System.Int32)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>Int64 GetInt64(SqliteStatement, int)</caller>
        <method>Int64 sqlite3_column_int64(IntPtr, int)</method>
        <raw>System.Int64 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_column_int64(System.IntPtr,System.Int32)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>string GetText(SqliteStatement, int)</caller>
        <method>IntPtr sqlite3_column_text(IntPtr, int)</method>
        <raw>System.IntPtr Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_column_text(System.IntPtr,System.Int32)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>Int64 GetBytes(SqliteStatement, int, int, Byte[], int, int)</caller>
        <method>int sqlite3_column_bytes(IntPtr, int)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_column_bytes(System.IntPtr,System.Int32)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>Int64 GetBytes(SqliteStatement, int, int, Byte[], int, int)</caller>
        <method>IntPtr sqlite3_column_blob(IntPtr, int)</method>
        <raw>System.IntPtr Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_column_blob(System.IntPtr,System.Int32)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>int AggregateCount(IntPtr)</caller>
        <method>int sqlite3_aggregate_count(IntPtr)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_aggregate_count(System.IntPtr)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>void CreateFunction(string, int, SqliteCallback, SqliteCallback, SqliteFinalCallback)</caller>
        <method>int sqlite3_create_function(IntPtr, Byte[], int, int, IntPtr, SqliteCallback, SqliteCallback, SqliteFinalCallback)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_create_function(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.IntPtr,Mono.Data.Sqlite.SqliteCallback,Mono.Data.Sqlite.SqliteCallback,Mono.Data.Sqlite.SqliteFinalCallback)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>void CreateCollation(string, SqliteCollation)</caller>
        <method>int sqlite3_create_collation(IntPtr, Byte[], int, IntPtr, SqliteCollation)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_create_collation(System.IntPtr,System.Byte[],System.Int32,System.IntPtr,Mono.Data.Sqlite.SqliteCollation)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>Int64 GetParamValueBytes(IntPtr, int, Byte[], int, int)</caller>
        <method>int sqlite3_value_bytes(IntPtr)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_value_bytes(System.IntPtr)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>Int64 GetParamValueBytes(IntPtr, int, Byte[], int, int)</caller>
        <method>IntPtr sqlite3_value_blob(IntPtr)</method>
        <raw>System.IntPtr Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_value_blob(System.IntPtr)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>double GetParamValueDouble(IntPtr)</caller>
        <method>double sqlite3_value_double(IntPtr)</method>
        <raw>System.Double Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_value_double(System.IntPtr)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>int GetParamValueInt32(IntPtr)</caller>
        <method>int sqlite3_value_int(IntPtr)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_value_int(System.IntPtr)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>Int64 GetParamValueInt64(IntPtr)</caller>
        <method>Int64 sqlite3_value_int64(IntPtr)</method>
        <raw>System.Int64 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_value_int64(System.IntPtr)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>string GetParamValueText(IntPtr)</caller>
        <method>IntPtr sqlite3_value_text(IntPtr)</method>
        <raw>System.IntPtr Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_value_text(System.IntPtr)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>TypeAffinity GetParamValueType(IntPtr)</caller>
        <method>TypeAffinity sqlite3_value_type(IntPtr)</method>
        <raw>Mono.Data.Sqlite.TypeAffinity Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_value_type(System.IntPtr)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>void ReturnBlob(IntPtr, Byte[])</caller>
        <method>void sqlite3_result_blob(IntPtr, Byte[], int, IntPtr)</method>
        <raw>System.Void Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_result_blob(System.IntPtr,System.Byte[],System.Int32,System.IntPtr)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>void ReturnDouble(IntPtr, double)</caller>
        <method>void sqlite3_result_double(IntPtr, double)</method>
        <raw>System.Void Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_result_double(System.IntPtr,System.Double)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>void ReturnError(IntPtr, string)</caller>
        <method>void sqlite3_result_error(IntPtr, Byte[], int)</method>
        <raw>System.Void Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_result_error(System.IntPtr,System.Byte[],System.Int32)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>void ReturnInt32(IntPtr, int)</caller>
        <method>void sqlite3_result_int(IntPtr, int)</method>
        <raw>System.Void Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_result_int(System.IntPtr,System.Int32)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>void ReturnInt64(IntPtr, Int64)</caller>
        <method>void sqlite3_result_int64(IntPtr, Int64)</method>
        <raw>System.Void Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_result_int64(System.IntPtr,System.Int64)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>void ReturnNull(IntPtr)</caller>
        <method>void sqlite3_result_null(IntPtr)</method>
        <raw>System.Void Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_result_null(System.IntPtr)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>void ReturnText(IntPtr, string)</caller>
        <method>void sqlite3_result_text(IntPtr, Byte[], int, IntPtr)</method>
        <raw>System.Void Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_result_text(System.IntPtr,System.Byte[],System.Int32,System.IntPtr)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>IntPtr AggregateContext(IntPtr)</caller>
        <method>IntPtr sqlite3_aggregate_context(IntPtr, int)</method>
        <raw>System.IntPtr Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_aggregate_context(System.IntPtr,System.Int32)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>void SetUpdateHook(SqliteUpdateCallback)</caller>
        <method>IntPtr sqlite3_update_hook(IntPtr, SqliteUpdateCallback)</method>
        <raw>System.IntPtr Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_update_hook(System.IntPtr,Mono.Data.Sqlite.SqliteUpdateCallback)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>void SetCommitHook(SqliteCommitCallback)</caller>
        <method>IntPtr sqlite3_commit_hook(IntPtr, SqliteCommitCallback)</method>
        <raw>System.IntPtr Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_commit_hook(System.IntPtr,Mono.Data.Sqlite.SqliteCommitCallback)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>void SetRollbackHook(SqliteRollbackCallback)</caller>
        <method>IntPtr sqlite3_rollback_hook(IntPtr, SqliteRollbackCallback)</method>
        <raw>System.IntPtr Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_rollback_hook(System.IntPtr,Mono.Data.Sqlite.SqliteRollbackCallback)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3</class>
        <caller>Int64 GetLastInsertRowId()</caller>
        <method>Int64 sqlite3_last_insert_rowid(IntPtr)</method>
        <raw>System.Int64 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_last_insert_rowid(System.IntPtr)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3_UTF16</class>
        <caller>string get_Version()</caller>
        <method>IntPtr sqlite3_libversion()</method>
        <raw>System.IntPtr Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_libversion()</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3_UTF16</class>
        <caller>void Open(string)</caller>
        <method>int sqlite3_open16(string, IntPtr&amp;)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_open16(System.String,System.IntPtr&amp;)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3_UTF16</class>
        <caller>string SqliteLastError()</caller>
        <method>IntPtr sqlite3_errmsg16(IntPtr)</method>
        <raw>System.IntPtr Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_errmsg16(System.IntPtr)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3_UTF16</class>
        <caller>string Bind_ParamName(SqliteStatement, int)</caller>
        <method>IntPtr sqlite3_bind_parameter_name(IntPtr, int)</method>
        <raw>System.IntPtr Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_bind_parameter_name(System.IntPtr,System.Int32)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3_UTF16</class>
        <caller>void Bind_Text(SqliteStatement, int, string)</caller>
        <method>int sqlite3_bind_text16(IntPtr, int, string, int, int)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_bind_text16(System.IntPtr,System.Int32,System.String,System.Int32,System.Int32)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3_UTF16</class>
        <caller>string ColumnName(SqliteStatement, int)</caller>
        <method>IntPtr sqlite3_column_name16(IntPtr, int)</method>
        <raw>System.IntPtr Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_column_name16(System.IntPtr,System.Int32)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3_UTF16</class>
        <caller>string GetText(SqliteStatement, int)</caller>
        <method>IntPtr sqlite3_column_text16(IntPtr, int)</method>
        <raw>System.IntPtr Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_column_text16(System.IntPtr,System.Int32)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3_UTF16</class>
        <caller>string ColumnOriginalName(SqliteStatement, int)</caller>
        <method>IntPtr sqlite3_column_origin_name16(IntPtr, int)</method>
        <raw>System.IntPtr Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_column_origin_name16(System.IntPtr,System.Int32)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3_UTF16</class>
        <caller>string ColumnDatabaseName(SqliteStatement, int)</caller>
        <method>IntPtr sqlite3_column_database_name16(IntPtr, int)</method>
        <raw>System.IntPtr Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_column_database_name16(System.IntPtr,System.Int32)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3_UTF16</class>
        <caller>string ColumnTableName(SqliteStatement, int)</caller>
        <method>IntPtr sqlite3_column_table_name16(IntPtr, int)</method>
        <raw>System.IntPtr Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_column_table_name16(System.IntPtr,System.Int32)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3_UTF16</class>
        <caller>void CreateFunction(string, int, SqliteCallback, SqliteCallback, SqliteFinalCallback)</caller>
        <method>int sqlite3_create_function16(IntPtr, string, int, int, IntPtr, SqliteCallback, SqliteCallback, SqliteFinalCallback)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_create_function16(System.IntPtr,System.String,System.Int32,System.Int32,System.IntPtr,Mono.Data.Sqlite.SqliteCallback,Mono.Data.Sqlite.SqliteCallback,Mono.Data.Sqlite.SqliteFinalCallback)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3_UTF16</class>
        <caller>void CreateCollation(string, SqliteCollation)</caller>
        <method>int sqlite3_create_collation16(IntPtr, string, int, IntPtr, SqliteCollation)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_create_collation16(System.IntPtr,System.String,System.Int32,System.IntPtr,Mono.Data.Sqlite.SqliteCollation)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3_UTF16</class>
        <caller>string GetParamValueText(IntPtr)</caller>
        <method>IntPtr sqlite3_value_text16(IntPtr)</method>
        <raw>System.IntPtr Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_value_text16(System.IntPtr)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3_UTF16</class>
        <caller>void ReturnError(IntPtr, string)</caller>
        <method>void sqlite3_result_error16(IntPtr, string, int)</method>
        <raw>System.Void Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_result_error16(System.IntPtr,System.String,System.Int32)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>Sqlite3_UTF16</class>
        <caller>void ReturnText(IntPtr, string)</caller>
        <method>void sqlite3_result_text16(IntPtr, string, int, IntPtr)</method>
        <raw>System.Void Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_result_text16(System.IntPtr,System.String,System.Int32,System.IntPtr)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>SqliteConnection</class>
        <caller>void CompressFile(string)</caller>
        <method>int sqlite3_compressfile(string)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_compressfile(System.String)</raw>
        <data>sqlite3</data>
      </issue>
      <issue type="pinv">
        <class>SqliteConnection</class>
        <caller>void DecompressFile(string)</caller>
        <method>int sqlite3_decompressfile(string)</method>
        <raw>System.Int32 Mono.Data.Sqlite.UnsafeNativeMethods::sqlite3_decompressfile(System.String)</raw>
        <data>sqlite3</data>
      </issue>
    </assembly>
    <assembly name="Mono.Media.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Mono.Posix.dll" version="2.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="396">
      <issue type="pinv">
        <class>Catalog</class>
        <caller>void Init(string, string)</caller>
        <method>IntPtr bindtextdomain(IntPtr, IntPtr)</method>
        <raw>System.IntPtr Mono.Unix.Catalog::bindtextdomain(System.IntPtr,System.IntPtr)</raw>
        <data>intl</data>
      </issue>
      <issue type="pinv">
        <class>Catalog</class>
        <caller>void Init(string, string)</caller>
        <method>IntPtr bind_textdomain_codeset(IntPtr, IntPtr)</method>
        <raw>System.IntPtr Mono.Unix.Catalog::bind_textdomain_codeset(System.IntPtr,System.IntPtr)</raw>
        <data>intl</data>
      </issue>
      <issue type="pinv">
        <class>Catalog</class>
        <caller>void Init(string, string)</caller>
        <method>IntPtr textdomain(IntPtr)</method>
        <raw>System.IntPtr Mono.Unix.Catalog::textdomain(System.IntPtr)</raw>
        <data>intl</data>
      </issue>
      <issue type="pinv">
        <class>Catalog</class>
        <caller>string GetString(string)</caller>
        <method>IntPtr gettext(IntPtr)</method>
        <raw>System.IntPtr Mono.Unix.Catalog::gettext(System.IntPtr)</raw>
        <data>intl</data>
      </issue>
      <issue type="pinv">
        <class>Catalog</class>
        <caller>string GetPluralString(string, string, int)</caller>
        <method>IntPtr ngettext(IntPtr, IntPtr, int)</method>
        <raw>System.IntPtr Mono.Unix.Catalog::ngettext(System.IntPtr,System.IntPtr,System.Int32)</raw>
        <data>intl</data>
      </issue>
      <issue type="pinv">
        <class>FileHandleOperations</class>
        <caller>void AdviseFileAccessPattern(int, FileAccessPattern, Int64, Int64)</caller>
        <method>int posix_fadvise(int, Int64, Int64, PosixFadviseAdvice)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::posix_fadvise(System.Int32,System.Int64,System.Int64,Mono.Unix.Native.PosixFadviseAdvice)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>FileHandleOperations</class>
        <caller>void AdviseFileAccessPattern(FileStream, FileAccessPattern, Int64, Int64)</caller>
        <method>int posix_fadvise(int, Int64, Int64, PosixFadviseAdvice)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::posix_fadvise(System.Int32,System.Int64,System.Int64,Mono.Unix.Native.PosixFadviseAdvice)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>FileHandleOperations</class>
        <caller>void AdviseFileAccessPattern(UnixStream, FileAccessPattern, Int64, Int64)</caller>
        <method>int posix_fadvise(int, Int64, Int64, PosixFadviseAdvice)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::posix_fadvise(System.Int32,System.Int64,System.Int64,Mono.Unix.Native.PosixFadviseAdvice)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>StdioFileStream</class>
        <caller>IntPtr Fopen(string, string)</caller>
        <method>IntPtr fopen(string, string)</method>
        <raw>System.IntPtr Mono.Unix.Native.Stdlib::fopen(System.String,System.String)</raw>
        <data>msvcrt</data>
      </issue>
      <issue type="pinv">
        <class>StdioFileStream</class>
        <caller>void InitStream(IntPtr, bool)</caller>
        <method>UInt64 fread(IntPtr, UInt64, UInt64, IntPtr)</method>
        <raw>System.UInt64 Mono.Unix.Native.Stdlib::fread(System.IntPtr,System.UInt64,System.UInt64,System.IntPtr)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>StdioFileStream</class>
        <caller>void InitStream(IntPtr, bool)</caller>
        <method>int ferror(IntPtr)</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::ferror(System.IntPtr)</raw>
        <data>msvcrt</data>
      </issue>
      <issue type="pinv">
        <class>StdioFileStream</class>
        <caller>void InitStream(IntPtr, bool)</caller>
        <method>UInt64 fwrite(IntPtr, UInt64, UInt64, IntPtr)</method>
        <raw>System.UInt64 Mono.Unix.Native.Stdlib::fwrite(System.IntPtr,System.UInt64,System.UInt64,System.IntPtr)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>StdioFileStream</class>
        <caller>void InitStream(IntPtr, bool)</caller>
        <method>int ferror(IntPtr)</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::ferror(System.IntPtr)</raw>
        <data>msvcrt</data>
      </issue>
      <issue type="pinv">
        <class>StdioFileStream</class>
        <caller>void InitStream(IntPtr, bool)</caller>
        <method>int clearerr(IntPtr)</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::clearerr(System.IntPtr)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>StdioFileStream</class>
        <caller>bool FileExists(string)</caller>
        <method>IntPtr fopen(string, string)</method>
        <raw>System.IntPtr Mono.Unix.Native.Stdlib::fopen(System.String,System.String)</raw>
        <data>msvcrt</data>
      </issue>
      <issue type="pinv">
        <class>StdioFileStream</class>
        <caller>bool FileExists(string)</caller>
        <method>int fclose(IntPtr)</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::fclose(System.IntPtr)</raw>
        <data>msvcrt</data>
      </issue>
      <issue type="pinv">
        <class>StdioFileStream</class>
        <caller>Int64 get_Length()</caller>
        <method>Int64 ftell(IntPtr)</method>
        <raw>System.Int64 Mono.Unix.Native.Stdlib::ftell(System.IntPtr)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>StdioFileStream</class>
        <caller>Int64 get_Length()</caller>
        <method>Int64 ftell(IntPtr)</method>
        <raw>System.Int64 Mono.Unix.Native.Stdlib::ftell(System.IntPtr)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>StdioFileStream</class>
        <caller>Int64 get_Position()</caller>
        <method>Int64 ftell(IntPtr)</method>
        <raw>System.Int64 Mono.Unix.Native.Stdlib::ftell(System.IntPtr)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>StdioFileStream</class>
        <caller>void Flush()</caller>
        <method>int fflush(IntPtr)</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::fflush(System.IntPtr)</raw>
        <data>msvcrt</data>
      </issue>
      <issue type="pinv">
        <class>StdioFileStream</class>
        <caller>int Read(Byte[], int, int)</caller>
        <method>int ferror(IntPtr)</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::ferror(System.IntPtr)</raw>
        <data>msvcrt</data>
      </issue>
      <issue type="pinv">
        <class>StdioFileStream</class>
        <caller>void Rewind()</caller>
        <method>int rewind(IntPtr)</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::rewind(System.IntPtr)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>StdioFileStream</class>
        <caller>Int64 Seek(Int64, SeekOrigin)</caller>
        <method>Int64 ftell(IntPtr)</method>
        <raw>System.Int64 Mono.Unix.Native.Stdlib::ftell(System.IntPtr)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>StdioFileStream</class>
        <caller>void Close()</caller>
        <method>int fclose(IntPtr)</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::fclose(System.IntPtr)</raw>
        <data>msvcrt</data>
      </issue>
      <issue type="pinv">
        <class>UnixDirectoryInfo</class>
        <caller>void Delete(bool)</caller>
        <method>int rmdir(string)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::rmdir(System.String)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixDirectoryInfo</class>
        <caller>Dirent[] GetEntries()</caller>
        <method>IntPtr opendir(string)</method>
        <raw>System.IntPtr Mono.Unix.Native.Syscall::opendir(System.String)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixDirectoryInfo</class>
        <caller>Dirent[] GetEntries()</caller>
        <method>int closedir(IntPtr)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::closedir(System.IntPtr)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixDirectoryInfo</class>
        <caller>Dirent[] GetEntries(Regex)</caller>
        <method>IntPtr opendir(string)</method>
        <raw>System.IntPtr Mono.Unix.Native.Syscall::opendir(System.String)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixDirectoryInfo</class>
        <caller>Dirent[] GetEntries(Regex)</caller>
        <method>int closedir(IntPtr)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::closedir(System.IntPtr)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixDirectoryInfo</class>
        <caller>string GetCurrentDirectory()</caller>
        <method>IntPtr getcwd(StringBuilder, UInt64)</method>
        <raw>System.IntPtr Mono.Unix.Native.Syscall::getcwd(System.Text.StringBuilder,System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>UnixDirectoryInfo</class>
        <caller>void SetCurrentDirectory(string)</caller>
        <method>int chdir(string)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::chdir(System.String)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixDriveInfo</class>
        <caller>bool get_IsReady()</caller>
        <method>int statvfs(string, Statvfs&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::statvfs(System.String,Mono.Unix.Native.Statvfs&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>UnixDriveInfo</class>
        <caller>bool Refresh(bool)</caller>
        <method>int statvfs(string, Statvfs&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::statvfs(System.String,Mono.Unix.Native.Statvfs&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>UnixEnvironment</class>
        <caller>Int64 get_RealGroupId()</caller>
        <method>uint getgid()</method>
        <raw>System.UInt32 Mono.Unix.Native.Syscall::getgid()</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixEnvironment</class>
        <caller>Int64 get_RealUserId()</caller>
        <method>uint getuid()</method>
        <raw>System.UInt32 Mono.Unix.Native.Syscall::getuid()</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixEnvironment</class>
        <caller>Int64 get_EffectiveGroupId()</caller>
        <method>uint getegid()</method>
        <raw>System.UInt32 Mono.Unix.Native.Syscall::getegid()</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixEnvironment</class>
        <caller>void set_EffectiveGroupId(Int64)</caller>
        <method>int setegid(uint)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::setegid(System.UInt32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixEnvironment</class>
        <caller>Int64 get_EffectiveUserId()</caller>
        <method>uint geteuid()</method>
        <raw>System.UInt32 Mono.Unix.Native.Syscall::geteuid()</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixEnvironment</class>
        <caller>void set_EffectiveUserId(Int64)</caller>
        <method>int seteuid(uint)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::seteuid(System.UInt32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixEnvironment</class>
        <caller>string GetConfigurationString(ConfstrName)</caller>
        <method>UInt64 confstr(ConfstrName, StringBuilder, UInt64)</method>
        <raw>System.UInt64 Mono.Unix.Native.Syscall::confstr(Mono.Unix.Native.ConfstrName,System.Text.StringBuilder,System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>UnixEnvironment</class>
        <caller>string GetConfigurationString(ConfstrName)</caller>
        <method>UInt64 confstr(ConfstrName, StringBuilder, UInt64)</method>
        <raw>System.UInt64 Mono.Unix.Native.Syscall::confstr(Mono.Unix.Native.ConfstrName,System.Text.StringBuilder,System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>UnixEnvironment</class>
        <caller>void SetNiceValue(int)</caller>
        <method>int nice(int)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::nice(System.Int32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixEnvironment</class>
        <caller>int CreateSession()</caller>
        <method>int setsid()</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::setsid()</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixEnvironment</class>
        <caller>void SetProcessGroup()</caller>
        <method>int setpgrp()</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::setpgrp()</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixEnvironment</class>
        <caller>int GetProcessGroup()</caller>
        <method>int getpgrp()</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::getpgrp()</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixEnvironment</class>
        <caller>UInt32[] _GetSupplementaryGroupIds()</caller>
        <method>int getgroups(int, UInt32[])</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::getgroups(System.Int32,System.UInt32[])</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixEnvironment</class>
        <caller>int GetParentProcessId()</caller>
        <method>int getppid()</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::getppid()</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixFileInfo</class>
        <caller>void Delete()</caller>
        <method>int unlink(string)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::unlink(System.String)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixFileInfo</class>
        <caller>UnixStream Create(FilePermissions)</caller>
        <method>int creat(string, FilePermissions)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::creat(System.String,Mono.Unix.Native.FilePermissions)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>UnixFileInfo</class>
        <caller>UnixStream Open(OpenFlags)</caller>
        <method>int open(string, OpenFlags)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::open(System.String,Mono.Unix.Native.OpenFlags)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>UnixFileInfo</class>
        <caller>UnixStream Open(OpenFlags, FilePermissions)</caller>
        <method>int open(string, OpenFlags, FilePermissions)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::open(System.String,Mono.Unix.Native.OpenFlags,Mono.Unix.Native.FilePermissions)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>UnixFileInfo</class>
        <caller>UnixStream Open(FileMode, FileAccess, FilePermissions)</caller>
        <method>int open(string, OpenFlags, FilePermissions)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::open(System.String,Mono.Unix.Native.OpenFlags,Mono.Unix.Native.FilePermissions)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>UnixFileSystemInfo</class>
        <caller>UnixFileSystemInfo CreateLink(string)</caller>
        <method>int link(string, string)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::link(System.String,System.String)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixFileSystemInfo</class>
        <caller>UnixSymbolicLinkInfo CreateSymbolicLink(string)</caller>
        <method>int symlink(string, string)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::symlink(System.String,System.String)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixFileSystemInfo</class>
        <caller>bool GetFileStatus(string, Stat&amp;)</caller>
        <method>int stat(string, Stat&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::stat(System.String,Mono.Unix.Native.Stat&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>UnixFileSystemInfo</class>
        <caller>void SetLength(Int64)</caller>
        <method>int truncate(string, Int64)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::truncate(System.String,System.Int64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>UnixFileSystemInfo</class>
        <caller>void SetOwner(Int64, Int64)</caller>
        <method>int chown(string, uint, uint)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::chown(System.String,System.UInt32,System.UInt32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixFileSystemInfo</class>
        <caller>UnixFileSystemInfo GetFileSystemEntry(string)</caller>
        <method>int lstat(string, Stat&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::lstat(System.String,Mono.Unix.Native.Stat&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>UnixMarshal</class>
        <caller>IntPtr AllocHeap(Int64)</caller>
        <method>IntPtr malloc(UInt64)</method>
        <raw>System.IntPtr Mono.Unix.Native.Stdlib::malloc(System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>UnixMarshal</class>
        <caller>IntPtr ReAllocHeap(IntPtr, Int64)</caller>
        <method>IntPtr realloc(IntPtr, UInt64)</method>
        <raw>System.IntPtr Mono.Unix.Native.Stdlib::realloc(System.IntPtr,System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>UnixMarshal</class>
        <caller>void FreeHeap(IntPtr)</caller>
        <method>void free(IntPtr)</method>
        <raw>System.Void Mono.Unix.Native.Stdlib::free(System.IntPtr)</raw>
        <data>msvcrt</data>
      </issue>
      <issue type="pinv">
        <class>UnixMarshal</class>
        <caller>string PtrToStringUnix(IntPtr)</caller>
        <method>UInt64 strlen(IntPtr)</method>
        <raw>System.UInt64 Mono.Unix.Native.Stdlib::strlen(System.IntPtr)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>UnixMarshal</class>
        <caller>int GetStringByteLength(IntPtr, Encoding)</caller>
        <method>UInt64 strlen(IntPtr)</method>
        <raw>System.UInt64 Mono.Unix.Native.Stdlib::strlen(System.IntPtr)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>UnixMarshal</class>
        <caller>int GetRandomBufferLength(IntPtr, int)</caller>
        <method>UInt64 strlen(IntPtr)</method>
        <raw>System.UInt64 Mono.Unix.Native.Stdlib::strlen(System.IntPtr)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>UnixPipes</class>
        <caller>UnixPipes CreatePipes()</caller>
        <method>int pipe(Int32&amp;, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::pipe(System.Int32&amp;,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>UnixProcess</class>
        <caller>int get_ExitCode()</caller>
        <method>int WEXITSTATUS(int)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::WEXITSTATUS(System.Int32)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>UnixProcess</class>
        <caller>int get_ProcessGroupId()</caller>
        <method>int getpgid(int)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::getpgid(System.Int32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixProcess</class>
        <caller>void set_ProcessGroupId(int)</caller>
        <method>int setpgid(int, int)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::setpgid(System.Int32,System.Int32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixProcess</class>
        <caller>int get_SessionId()</caller>
        <method>int getsid(int)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::getsid(System.Int32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixProcess</class>
        <caller>int GetCurrentProcessId()</caller>
        <method>int getpid()</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::getpid()</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixSignal</class>
        <caller>void Dispose(bool)</caller>
        <method>int uninstall(IntPtr)</method>
        <raw>System.Int32 Mono.Unix.UnixSignal::uninstall(System.IntPtr)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>UnixSignal</class>
        <caller>int WaitAny(UnixSignal[], int)</caller>
        <method>int WaitAny(IntPtr[], int, int)</method>
        <raw>System.Int32 Mono.Unix.UnixSignal::WaitAny(System.IntPtr[],System.Int32,System.Int32)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>UnixSignal</class>
        <caller>void .ctor(Signum)</caller>
        <method>IntPtr install(int)</method>
        <raw>System.IntPtr Mono.Unix.UnixSignal::install(System.Int32)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>UnixStream</class>
        <caller>void RefreshStat()</caller>
        <method>int fstat(int, Stat&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::fstat(System.Int32,Mono.Unix.Native.Stat&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>UnixStream</class>
        <caller>void SetLength(Int64)</caller>
        <method>int ftruncate(int, Int64)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::ftruncate(System.Int32,System.Int64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>UnixStream</class>
        <caller>void SendTo(int, UInt64)</caller>
        <method>Int64 sendfile(int, int, Int64&amp;, UInt64)</method>
        <raw>System.Int64 Mono.Unix.Native.Syscall::sendfile(System.Int32,System.Int32,System.Int64&amp;,System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>UnixStream</class>
        <caller>void SetOwner(Int64, Int64)</caller>
        <method>int fchown(int, uint, uint)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::fchown(System.Int32,System.UInt32,System.UInt32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixStream</class>
        <caller>void Close()</caller>
        <method>int close(int)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::close(System.Int32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixStream</class>
        <caller>void .ctor(int, bool)</caller>
        <method>Int64 read(int, IntPtr, UInt64)</method>
        <raw>System.Int64 Mono.Unix.Native.Syscall::read(System.Int32,System.IntPtr,System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>UnixStream</class>
        <caller>void .ctor(int, bool)</caller>
        <method>Int64 write(int, IntPtr, UInt64)</method>
        <raw>System.Int64 Mono.Unix.Native.Syscall::write(System.Int32,System.IntPtr,System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>UnixSymbolicLinkInfo</class>
        <caller>void CreateSymbolicLinkTo(string)</caller>
        <method>int symlink(string, string)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::symlink(System.String,System.String)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixSymbolicLinkInfo</class>
        <caller>void CreateSymbolicLinkTo(UnixFileSystemInfo)</caller>
        <method>int symlink(string, string)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::symlink(System.String,System.String)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixSymbolicLinkInfo</class>
        <caller>void Delete()</caller>
        <method>int unlink(string)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::unlink(System.String)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixSymbolicLinkInfo</class>
        <caller>void SetOwner(Int64, Int64)</caller>
        <method>int lchown(string, uint, uint)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::lchown(System.String,System.UInt32,System.UInt32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixSymbolicLinkInfo</class>
        <caller>bool GetFileStatus(string, Stat&amp;)</caller>
        <method>int lstat(string, Stat&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::lstat(System.String,Mono.Unix.Native.Stat&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>UnixUserInfo</class>
        <caller>Int64 GetRealUserId()</caller>
        <method>uint getuid()</method>
        <raw>System.UInt32 Mono.Unix.Native.Syscall::getuid()</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixUserInfo</class>
        <caller>string GetLoginName()</caller>
        <method>int getlogin_r(StringBuilder, UInt64)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::getlogin_r(System.Text.StringBuilder,System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryCopy(Statvfs&amp;, IntPtr)</caller>
        <method>int FromStatvfs(Statvfs&amp;, IntPtr)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromStatvfs(Mono.Unix.Native.Statvfs&amp;,System.IntPtr)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryCopy(IntPtr, Statvfs&amp;)</caller>
        <method>int ToStatvfs(IntPtr, Statvfs&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToStatvfs(System.IntPtr,Mono.Unix.Native.Statvfs&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryFromAccessModes(AccessModes, Int32&amp;)</caller>
        <method>int FromAccessModes(AccessModes, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromAccessModes(Mono.Unix.Native.AccessModes,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>int FromAccessModes(AccessModes)</caller>
        <method>int FromAccessModes(AccessModes, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromAccessModes(Mono.Unix.Native.AccessModes,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryToAccessModes(int, AccessModes&amp;)</caller>
        <method>int ToAccessModes(int, AccessModes&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToAccessModes(System.Int32,Mono.Unix.Native.AccessModes&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>AccessModes ToAccessModes(int)</caller>
        <method>int ToAccessModes(int, AccessModes&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToAccessModes(System.Int32,Mono.Unix.Native.AccessModes&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryFromConfstrName(ConfstrName, Int32&amp;)</caller>
        <method>int FromConfstrName(ConfstrName, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromConfstrName(Mono.Unix.Native.ConfstrName,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>int FromConfstrName(ConfstrName)</caller>
        <method>int FromConfstrName(ConfstrName, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromConfstrName(Mono.Unix.Native.ConfstrName,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryToConfstrName(int, ConfstrName&amp;)</caller>
        <method>int ToConfstrName(int, ConfstrName&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToConfstrName(System.Int32,Mono.Unix.Native.ConfstrName&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>ConfstrName ToConfstrName(int)</caller>
        <method>int ToConfstrName(int, ConfstrName&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToConfstrName(System.Int32,Mono.Unix.Native.ConfstrName&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryFromDirectoryNotifyFlags(DirectoryNotifyFlags, Int32&amp;)</caller>
        <method>int FromDirectoryNotifyFlags(DirectoryNotifyFlags, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromDirectoryNotifyFlags(Mono.Unix.Native.DirectoryNotifyFlags,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>int FromDirectoryNotifyFlags(DirectoryNotifyFlags)</caller>
        <method>int FromDirectoryNotifyFlags(DirectoryNotifyFlags, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromDirectoryNotifyFlags(Mono.Unix.Native.DirectoryNotifyFlags,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryToDirectoryNotifyFlags(int, DirectoryNotifyFlags&amp;)</caller>
        <method>int ToDirectoryNotifyFlags(int, DirectoryNotifyFlags&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToDirectoryNotifyFlags(System.Int32,Mono.Unix.Native.DirectoryNotifyFlags&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>DirectoryNotifyFlags ToDirectoryNotifyFlags(int)</caller>
        <method>int ToDirectoryNotifyFlags(int, DirectoryNotifyFlags&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToDirectoryNotifyFlags(System.Int32,Mono.Unix.Native.DirectoryNotifyFlags&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryFromErrno(Errno, Int32&amp;)</caller>
        <method>int FromErrno(Errno, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromErrno(Mono.Unix.Native.Errno,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>int FromErrno(Errno)</caller>
        <method>int FromErrno(Errno, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromErrno(Mono.Unix.Native.Errno,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryToErrno(int, Errno&amp;)</caller>
        <method>int ToErrno(int, Errno&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToErrno(System.Int32,Mono.Unix.Native.Errno&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>Errno ToErrno(int)</caller>
        <method>int ToErrno(int, Errno&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToErrno(System.Int32,Mono.Unix.Native.Errno&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryFromFcntlCommand(FcntlCommand, Int32&amp;)</caller>
        <method>int FromFcntlCommand(FcntlCommand, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromFcntlCommand(Mono.Unix.Native.FcntlCommand,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>int FromFcntlCommand(FcntlCommand)</caller>
        <method>int FromFcntlCommand(FcntlCommand, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromFcntlCommand(Mono.Unix.Native.FcntlCommand,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryToFcntlCommand(int, FcntlCommand&amp;)</caller>
        <method>int ToFcntlCommand(int, FcntlCommand&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToFcntlCommand(System.Int32,Mono.Unix.Native.FcntlCommand&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>FcntlCommand ToFcntlCommand(int)</caller>
        <method>int ToFcntlCommand(int, FcntlCommand&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToFcntlCommand(System.Int32,Mono.Unix.Native.FcntlCommand&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryFromFilePermissions(FilePermissions, UInt32&amp;)</caller>
        <method>int FromFilePermissions(FilePermissions, UInt32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromFilePermissions(Mono.Unix.Native.FilePermissions,System.UInt32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>uint FromFilePermissions(FilePermissions)</caller>
        <method>int FromFilePermissions(FilePermissions, UInt32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromFilePermissions(Mono.Unix.Native.FilePermissions,System.UInt32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryToFilePermissions(uint, FilePermissions&amp;)</caller>
        <method>int ToFilePermissions(uint, FilePermissions&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToFilePermissions(System.UInt32,Mono.Unix.Native.FilePermissions&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>FilePermissions ToFilePermissions(uint)</caller>
        <method>int ToFilePermissions(uint, FilePermissions&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToFilePermissions(System.UInt32,Mono.Unix.Native.FilePermissions&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryFromLockType(LockType, Int16&amp;)</caller>
        <method>int FromLockType(LockType, Int16&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromLockType(Mono.Unix.Native.LockType,System.Int16&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>Int16 FromLockType(LockType)</caller>
        <method>int FromLockType(LockType, Int16&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromLockType(Mono.Unix.Native.LockType,System.Int16&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryToLockType(Int16, LockType&amp;)</caller>
        <method>int ToLockType(Int16, LockType&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToLockType(System.Int16,Mono.Unix.Native.LockType&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>LockType ToLockType(Int16)</caller>
        <method>int ToLockType(Int16, LockType&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToLockType(System.Int16,Mono.Unix.Native.LockType&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryFromLockfCommand(LockfCommand, Int32&amp;)</caller>
        <method>int FromLockfCommand(LockfCommand, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromLockfCommand(Mono.Unix.Native.LockfCommand,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>int FromLockfCommand(LockfCommand)</caller>
        <method>int FromLockfCommand(LockfCommand, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromLockfCommand(Mono.Unix.Native.LockfCommand,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryToLockfCommand(int, LockfCommand&amp;)</caller>
        <method>int ToLockfCommand(int, LockfCommand&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToLockfCommand(System.Int32,Mono.Unix.Native.LockfCommand&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>LockfCommand ToLockfCommand(int)</caller>
        <method>int ToLockfCommand(int, LockfCommand&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToLockfCommand(System.Int32,Mono.Unix.Native.LockfCommand&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryFromMlockallFlags(MlockallFlags, Int32&amp;)</caller>
        <method>int FromMlockallFlags(MlockallFlags, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromMlockallFlags(Mono.Unix.Native.MlockallFlags,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>int FromMlockallFlags(MlockallFlags)</caller>
        <method>int FromMlockallFlags(MlockallFlags, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromMlockallFlags(Mono.Unix.Native.MlockallFlags,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryToMlockallFlags(int, MlockallFlags&amp;)</caller>
        <method>int ToMlockallFlags(int, MlockallFlags&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToMlockallFlags(System.Int32,Mono.Unix.Native.MlockallFlags&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>MlockallFlags ToMlockallFlags(int)</caller>
        <method>int ToMlockallFlags(int, MlockallFlags&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToMlockallFlags(System.Int32,Mono.Unix.Native.MlockallFlags&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryFromMmapFlags(MmapFlags, Int32&amp;)</caller>
        <method>int FromMmapFlags(MmapFlags, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromMmapFlags(Mono.Unix.Native.MmapFlags,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>int FromMmapFlags(MmapFlags)</caller>
        <method>int FromMmapFlags(MmapFlags, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromMmapFlags(Mono.Unix.Native.MmapFlags,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryToMmapFlags(int, MmapFlags&amp;)</caller>
        <method>int ToMmapFlags(int, MmapFlags&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToMmapFlags(System.Int32,Mono.Unix.Native.MmapFlags&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>MmapFlags ToMmapFlags(int)</caller>
        <method>int ToMmapFlags(int, MmapFlags&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToMmapFlags(System.Int32,Mono.Unix.Native.MmapFlags&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryFromMmapProts(MmapProts, Int32&amp;)</caller>
        <method>int FromMmapProts(MmapProts, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromMmapProts(Mono.Unix.Native.MmapProts,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>int FromMmapProts(MmapProts)</caller>
        <method>int FromMmapProts(MmapProts, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromMmapProts(Mono.Unix.Native.MmapProts,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryToMmapProts(int, MmapProts&amp;)</caller>
        <method>int ToMmapProts(int, MmapProts&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToMmapProts(System.Int32,Mono.Unix.Native.MmapProts&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>MmapProts ToMmapProts(int)</caller>
        <method>int ToMmapProts(int, MmapProts&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToMmapProts(System.Int32,Mono.Unix.Native.MmapProts&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryFromMountFlags(MountFlags, UInt64&amp;)</caller>
        <method>int FromMountFlags(MountFlags, UInt64&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromMountFlags(Mono.Unix.Native.MountFlags,System.UInt64&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>UInt64 FromMountFlags(MountFlags)</caller>
        <method>int FromMountFlags(MountFlags, UInt64&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromMountFlags(Mono.Unix.Native.MountFlags,System.UInt64&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryToMountFlags(UInt64, MountFlags&amp;)</caller>
        <method>int ToMountFlags(UInt64, MountFlags&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToMountFlags(System.UInt64,Mono.Unix.Native.MountFlags&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>MountFlags ToMountFlags(UInt64)</caller>
        <method>int ToMountFlags(UInt64, MountFlags&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToMountFlags(System.UInt64,Mono.Unix.Native.MountFlags&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryFromMremapFlags(MremapFlags, UInt64&amp;)</caller>
        <method>int FromMremapFlags(MremapFlags, UInt64&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromMremapFlags(Mono.Unix.Native.MremapFlags,System.UInt64&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>UInt64 FromMremapFlags(MremapFlags)</caller>
        <method>int FromMremapFlags(MremapFlags, UInt64&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromMremapFlags(Mono.Unix.Native.MremapFlags,System.UInt64&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryToMremapFlags(UInt64, MremapFlags&amp;)</caller>
        <method>int ToMremapFlags(UInt64, MremapFlags&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToMremapFlags(System.UInt64,Mono.Unix.Native.MremapFlags&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>MremapFlags ToMremapFlags(UInt64)</caller>
        <method>int ToMremapFlags(UInt64, MremapFlags&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToMremapFlags(System.UInt64,Mono.Unix.Native.MremapFlags&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryFromMsyncFlags(MsyncFlags, Int32&amp;)</caller>
        <method>int FromMsyncFlags(MsyncFlags, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromMsyncFlags(Mono.Unix.Native.MsyncFlags,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>int FromMsyncFlags(MsyncFlags)</caller>
        <method>int FromMsyncFlags(MsyncFlags, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromMsyncFlags(Mono.Unix.Native.MsyncFlags,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryToMsyncFlags(int, MsyncFlags&amp;)</caller>
        <method>int ToMsyncFlags(int, MsyncFlags&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToMsyncFlags(System.Int32,Mono.Unix.Native.MsyncFlags&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>MsyncFlags ToMsyncFlags(int)</caller>
        <method>int ToMsyncFlags(int, MsyncFlags&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToMsyncFlags(System.Int32,Mono.Unix.Native.MsyncFlags&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryFromOpenFlags(OpenFlags, Int32&amp;)</caller>
        <method>int FromOpenFlags(OpenFlags, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromOpenFlags(Mono.Unix.Native.OpenFlags,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>int FromOpenFlags(OpenFlags)</caller>
        <method>int FromOpenFlags(OpenFlags, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromOpenFlags(Mono.Unix.Native.OpenFlags,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryToOpenFlags(int, OpenFlags&amp;)</caller>
        <method>int ToOpenFlags(int, OpenFlags&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToOpenFlags(System.Int32,Mono.Unix.Native.OpenFlags&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>OpenFlags ToOpenFlags(int)</caller>
        <method>int ToOpenFlags(int, OpenFlags&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToOpenFlags(System.Int32,Mono.Unix.Native.OpenFlags&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryFromPathconfName(PathconfName, Int32&amp;)</caller>
        <method>int FromPathconfName(PathconfName, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromPathconfName(Mono.Unix.Native.PathconfName,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>int FromPathconfName(PathconfName)</caller>
        <method>int FromPathconfName(PathconfName, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromPathconfName(Mono.Unix.Native.PathconfName,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryToPathconfName(int, PathconfName&amp;)</caller>
        <method>int ToPathconfName(int, PathconfName&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToPathconfName(System.Int32,Mono.Unix.Native.PathconfName&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>PathconfName ToPathconfName(int)</caller>
        <method>int ToPathconfName(int, PathconfName&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToPathconfName(System.Int32,Mono.Unix.Native.PathconfName&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryFromPollEvents(PollEvents, Int16&amp;)</caller>
        <method>int FromPollEvents(PollEvents, Int16&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromPollEvents(Mono.Unix.Native.PollEvents,System.Int16&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>Int16 FromPollEvents(PollEvents)</caller>
        <method>int FromPollEvents(PollEvents, Int16&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromPollEvents(Mono.Unix.Native.PollEvents,System.Int16&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryToPollEvents(Int16, PollEvents&amp;)</caller>
        <method>int ToPollEvents(Int16, PollEvents&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToPollEvents(System.Int16,Mono.Unix.Native.PollEvents&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>PollEvents ToPollEvents(Int16)</caller>
        <method>int ToPollEvents(Int16, PollEvents&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToPollEvents(System.Int16,Mono.Unix.Native.PollEvents&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryCopy(Pollfd&amp;, IntPtr)</caller>
        <method>int FromPollfd(Pollfd&amp;, IntPtr)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromPollfd(Mono.Unix.Native.Pollfd&amp;,System.IntPtr)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryCopy(IntPtr, Pollfd&amp;)</caller>
        <method>int ToPollfd(IntPtr, Pollfd&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToPollfd(System.IntPtr,Mono.Unix.Native.Pollfd&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryFromPosixFadviseAdvice(PosixFadviseAdvice, Int32&amp;)</caller>
        <method>int FromPosixFadviseAdvice(PosixFadviseAdvice, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromPosixFadviseAdvice(Mono.Unix.Native.PosixFadviseAdvice,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>int FromPosixFadviseAdvice(PosixFadviseAdvice)</caller>
        <method>int FromPosixFadviseAdvice(PosixFadviseAdvice, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromPosixFadviseAdvice(Mono.Unix.Native.PosixFadviseAdvice,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryToPosixFadviseAdvice(int, PosixFadviseAdvice&amp;)</caller>
        <method>int ToPosixFadviseAdvice(int, PosixFadviseAdvice&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToPosixFadviseAdvice(System.Int32,Mono.Unix.Native.PosixFadviseAdvice&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>PosixFadviseAdvice ToPosixFadviseAdvice(int)</caller>
        <method>int ToPosixFadviseAdvice(int, PosixFadviseAdvice&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToPosixFadviseAdvice(System.Int32,Mono.Unix.Native.PosixFadviseAdvice&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryFromPosixMadviseAdvice(PosixMadviseAdvice, Int32&amp;)</caller>
        <method>int FromPosixMadviseAdvice(PosixMadviseAdvice, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromPosixMadviseAdvice(Mono.Unix.Native.PosixMadviseAdvice,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>int FromPosixMadviseAdvice(PosixMadviseAdvice)</caller>
        <method>int FromPosixMadviseAdvice(PosixMadviseAdvice, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromPosixMadviseAdvice(Mono.Unix.Native.PosixMadviseAdvice,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryToPosixMadviseAdvice(int, PosixMadviseAdvice&amp;)</caller>
        <method>int ToPosixMadviseAdvice(int, PosixMadviseAdvice&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToPosixMadviseAdvice(System.Int32,Mono.Unix.Native.PosixMadviseAdvice&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>PosixMadviseAdvice ToPosixMadviseAdvice(int)</caller>
        <method>int ToPosixMadviseAdvice(int, PosixMadviseAdvice&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToPosixMadviseAdvice(System.Int32,Mono.Unix.Native.PosixMadviseAdvice&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryFromSeekFlags(SeekFlags, Int16&amp;)</caller>
        <method>int FromSeekFlags(SeekFlags, Int16&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromSeekFlags(Mono.Unix.Native.SeekFlags,System.Int16&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>Int16 FromSeekFlags(SeekFlags)</caller>
        <method>int FromSeekFlags(SeekFlags, Int16&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromSeekFlags(Mono.Unix.Native.SeekFlags,System.Int16&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryToSeekFlags(Int16, SeekFlags&amp;)</caller>
        <method>int ToSeekFlags(Int16, SeekFlags&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToSeekFlags(System.Int16,Mono.Unix.Native.SeekFlags&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>SeekFlags ToSeekFlags(Int16)</caller>
        <method>int ToSeekFlags(Int16, SeekFlags&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToSeekFlags(System.Int16,Mono.Unix.Native.SeekFlags&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryFromSignum(Signum, Int32&amp;)</caller>
        <method>int FromSignum(Signum, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromSignum(Mono.Unix.Native.Signum,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>int FromSignum(Signum)</caller>
        <method>int FromSignum(Signum, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromSignum(Mono.Unix.Native.Signum,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryToSignum(int, Signum&amp;)</caller>
        <method>int ToSignum(int, Signum&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToSignum(System.Int32,Mono.Unix.Native.Signum&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>Signum ToSignum(int)</caller>
        <method>int ToSignum(int, Signum&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToSignum(System.Int32,Mono.Unix.Native.Signum&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryCopy(Stat&amp;, IntPtr)</caller>
        <method>int FromStat(Stat&amp;, IntPtr)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromStat(Mono.Unix.Native.Stat&amp;,System.IntPtr)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryCopy(IntPtr, Stat&amp;)</caller>
        <method>int ToStat(IntPtr, Stat&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToStat(System.IntPtr,Mono.Unix.Native.Stat&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryFromSysconfName(SysconfName, Int32&amp;)</caller>
        <method>int FromSysconfName(SysconfName, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromSysconfName(Mono.Unix.Native.SysconfName,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>int FromSysconfName(SysconfName)</caller>
        <method>int FromSysconfName(SysconfName, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromSysconfName(Mono.Unix.Native.SysconfName,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryToSysconfName(int, SysconfName&amp;)</caller>
        <method>int ToSysconfName(int, SysconfName&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToSysconfName(System.Int32,Mono.Unix.Native.SysconfName&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>SysconfName ToSysconfName(int)</caller>
        <method>int ToSysconfName(int, SysconfName&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToSysconfName(System.Int32,Mono.Unix.Native.SysconfName&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryFromSyslogFacility(SyslogFacility, Int32&amp;)</caller>
        <method>int FromSyslogFacility(SyslogFacility, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromSyslogFacility(Mono.Unix.Native.SyslogFacility,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>int FromSyslogFacility(SyslogFacility)</caller>
        <method>int FromSyslogFacility(SyslogFacility, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromSyslogFacility(Mono.Unix.Native.SyslogFacility,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryToSyslogFacility(int, SyslogFacility&amp;)</caller>
        <method>int ToSyslogFacility(int, SyslogFacility&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToSyslogFacility(System.Int32,Mono.Unix.Native.SyslogFacility&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>SyslogFacility ToSyslogFacility(int)</caller>
        <method>int ToSyslogFacility(int, SyslogFacility&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToSyslogFacility(System.Int32,Mono.Unix.Native.SyslogFacility&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryFromSyslogLevel(SyslogLevel, Int32&amp;)</caller>
        <method>int FromSyslogLevel(SyslogLevel, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromSyslogLevel(Mono.Unix.Native.SyslogLevel,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>int FromSyslogLevel(SyslogLevel)</caller>
        <method>int FromSyslogLevel(SyslogLevel, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromSyslogLevel(Mono.Unix.Native.SyslogLevel,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryToSyslogLevel(int, SyslogLevel&amp;)</caller>
        <method>int ToSyslogLevel(int, SyslogLevel&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToSyslogLevel(System.Int32,Mono.Unix.Native.SyslogLevel&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>SyslogLevel ToSyslogLevel(int)</caller>
        <method>int ToSyslogLevel(int, SyslogLevel&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToSyslogLevel(System.Int32,Mono.Unix.Native.SyslogLevel&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryFromSyslogOptions(SyslogOptions, Int32&amp;)</caller>
        <method>int FromSyslogOptions(SyslogOptions, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromSyslogOptions(Mono.Unix.Native.SyslogOptions,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>int FromSyslogOptions(SyslogOptions)</caller>
        <method>int FromSyslogOptions(SyslogOptions, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromSyslogOptions(Mono.Unix.Native.SyslogOptions,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryToSyslogOptions(int, SyslogOptions&amp;)</caller>
        <method>int ToSyslogOptions(int, SyslogOptions&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToSyslogOptions(System.Int32,Mono.Unix.Native.SyslogOptions&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>SyslogOptions ToSyslogOptions(int)</caller>
        <method>int ToSyslogOptions(int, SyslogOptions&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToSyslogOptions(System.Int32,Mono.Unix.Native.SyslogOptions&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryCopy(Timeval&amp;, IntPtr)</caller>
        <method>int FromTimeval(Timeval&amp;, IntPtr)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromTimeval(Mono.Unix.Native.Timeval&amp;,System.IntPtr)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryCopy(IntPtr, Timeval&amp;)</caller>
        <method>int ToTimeval(IntPtr, Timeval&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToTimeval(System.IntPtr,Mono.Unix.Native.Timeval&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryCopy(Timezone&amp;, IntPtr)</caller>
        <method>int FromTimezone(Timezone&amp;, IntPtr)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromTimezone(Mono.Unix.Native.Timezone&amp;,System.IntPtr)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryCopy(IntPtr, Timezone&amp;)</caller>
        <method>int ToTimezone(IntPtr, Timezone&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToTimezone(System.IntPtr,Mono.Unix.Native.Timezone&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryCopy(Utimbuf&amp;, IntPtr)</caller>
        <method>int FromUtimbuf(Utimbuf&amp;, IntPtr)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromUtimbuf(Mono.Unix.Native.Utimbuf&amp;,System.IntPtr)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryCopy(IntPtr, Utimbuf&amp;)</caller>
        <method>int ToUtimbuf(IntPtr, Utimbuf&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToUtimbuf(System.IntPtr,Mono.Unix.Native.Utimbuf&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryFromWaitOptions(WaitOptions, Int32&amp;)</caller>
        <method>int FromWaitOptions(WaitOptions, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromWaitOptions(Mono.Unix.Native.WaitOptions,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>int FromWaitOptions(WaitOptions)</caller>
        <method>int FromWaitOptions(WaitOptions, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromWaitOptions(Mono.Unix.Native.WaitOptions,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryToWaitOptions(int, WaitOptions&amp;)</caller>
        <method>int ToWaitOptions(int, WaitOptions&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToWaitOptions(System.Int32,Mono.Unix.Native.WaitOptions&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>WaitOptions ToWaitOptions(int)</caller>
        <method>int ToWaitOptions(int, WaitOptions&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToWaitOptions(System.Int32,Mono.Unix.Native.WaitOptions&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryFromXattrFlags(XattrFlags, Int32&amp;)</caller>
        <method>int FromXattrFlags(XattrFlags, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromXattrFlags(Mono.Unix.Native.XattrFlags,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>int FromXattrFlags(XattrFlags)</caller>
        <method>int FromXattrFlags(XattrFlags, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::FromXattrFlags(Mono.Unix.Native.XattrFlags,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>bool TryToXattrFlags(int, XattrFlags&amp;)</caller>
        <method>int ToXattrFlags(int, XattrFlags&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToXattrFlags(System.Int32,Mono.Unix.Native.XattrFlags&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>NativeConvert</class>
        <caller>XattrFlags ToXattrFlags(int)</caller>
        <method>int ToXattrFlags(int, XattrFlags&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.NativeConvert::ToXattrFlags(System.Int32,Mono.Unix.Native.XattrFlags&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>FilePosition</class>
        <caller>void Cleanup()</caller>
        <method>void free(IntPtr)</method>
        <raw>System.Void Mono.Unix.Native.Stdlib::free(System.IntPtr)</raw>
        <data>msvcrt</data>
      </issue>
      <issue type="pinv">
        <class>FilePosition</class>
        <caller>string GetDump()</caller>
        <method>int DumpFilePosition(StringBuilder, HandleRef, int)</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::DumpFilePosition(System.Text.StringBuilder,System.Runtime.InteropServices.HandleRef,System.Int32)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>FilePosition</class>
        <caller>void .ctor()</caller>
        <method>IntPtr CreateFilePosition()</method>
        <raw>System.IntPtr Mono.Unix.Native.Stdlib::CreateFilePosition()</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>FilePosition</class>
        <caller>void .cctor()</caller>
        <method>int DumpFilePosition(StringBuilder, HandleRef, int)</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::DumpFilePosition(System.Text.StringBuilder,System.Runtime.InteropServices.HandleRef,System.Int32)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>void SetLastError(Errno)</caller>
        <method>void SetLastError(int)</method>
        <raw>System.Void Mono.Unix.Native.Stdlib::SetLastError(System.Int32)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>SignalHandler signal(Signum, SignalHandler)</caller>
        <method>IntPtr sys_signal(int, IntPtr)</method>
        <raw>System.IntPtr Mono.Unix.Native.Stdlib::sys_signal(System.Int32,System.IntPtr)</raw>
        <data>msvcrt</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>SignalHandler signal(Signum, SignalHandler)</caller>
        <method>IntPtr sys_signal(int, IntPtr)</method>
        <raw>System.IntPtr Mono.Unix.Native.Stdlib::sys_signal(System.Int32,System.IntPtr)</raw>
        <data>msvcrt</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>SignalHandler signal(Signum, SignalHandler)</caller>
        <method>IntPtr sys_signal(int, IntPtr)</method>
        <raw>System.IntPtr Mono.Unix.Native.Stdlib::sys_signal(System.Int32,System.IntPtr)</raw>
        <data>msvcrt</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>SignalHandler signal(Signum, SignalHandler)</caller>
        <method>IntPtr sys_signal(int, SignalHandler)</method>
        <raw>System.IntPtr Mono.Unix.Native.Stdlib::sys_signal(System.Int32,Mono.Unix.Native.SignalHandler)</raw>
        <data>msvcrt</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>int SetSignalAction(Signum, SignalAction)</caller>
        <method>IntPtr sys_signal(int, IntPtr)</method>
        <raw>System.IntPtr Mono.Unix.Native.Stdlib::sys_signal(System.Int32,System.IntPtr)</raw>
        <data>msvcrt</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>int raise(Signum)</caller>
        <method>int sys_raise(int)</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::sys_raise(System.Int32)</raw>
        <data>msvcrt</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>string tmpnam(StringBuilder)</caller>
        <method>IntPtr sys_tmpnam(StringBuilder)</method>
        <raw>System.IntPtr Mono.Unix.Native.Stdlib::sys_tmpnam(System.Text.StringBuilder)</raw>
        <data>msvcrt</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>string tmpnam()</caller>
        <method>IntPtr sys_tmpnam(StringBuilder)</method>
        <raw>System.IntPtr Mono.Unix.Native.Stdlib::sys_tmpnam(System.Text.StringBuilder)</raw>
        <data>msvcrt</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>int setbuf(IntPtr, Byte*)</caller>
        <method>int setbuf(IntPtr, IntPtr)</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::setbuf(System.IntPtr,System.IntPtr)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>int setvbuf(IntPtr, Byte*, int, UInt64)</caller>
        <method>int setvbuf(IntPtr, IntPtr, int, UInt64)</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::setvbuf(System.IntPtr,System.IntPtr,System.Int32,System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>int fprintf(IntPtr, string)</caller>
        <method>int sys_fprintf(IntPtr, string, string)</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::sys_fprintf(System.IntPtr,System.String,System.String)</raw>
        <data>msvcrt</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>int printf(string)</caller>
        <method>int sys_printf(string, string)</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::sys_printf(System.String,System.String)</raw>
        <data>msvcrt</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>int snprintf(StringBuilder, UInt64, string)</caller>
        <method>int sys_snprintf(StringBuilder, UInt64, string, string)</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::sys_snprintf(System.Text.StringBuilder,System.UInt64,System.String,System.String)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>int snprintf(StringBuilder, string)</caller>
        <method>int sys_snprintf(StringBuilder, UInt64, string, string)</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::sys_snprintf(System.Text.StringBuilder,System.UInt64,System.String,System.String)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>StringBuilder fgets(StringBuilder, int, IntPtr)</caller>
        <method>IntPtr sys_fgets(StringBuilder, int, IntPtr)</method>
        <raw>System.IntPtr Mono.Unix.Native.Stdlib::sys_fgets(System.Text.StringBuilder,System.Int32,System.IntPtr)</raw>
        <data>msvcrt</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>UInt64 fread(void*, UInt64, UInt64, IntPtr)</caller>
        <method>UInt64 fread(IntPtr, UInt64, UInt64, IntPtr)</method>
        <raw>System.UInt64 Mono.Unix.Native.Stdlib::fread(System.IntPtr,System.UInt64,System.UInt64,System.IntPtr)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>UInt64 fread(Byte[], UInt64, UInt64, IntPtr)</caller>
        <method>UInt64 sys_fread(Byte[], UInt64, UInt64, IntPtr)</method>
        <raw>System.UInt64 Mono.Unix.Native.Stdlib::sys_fread(System.Byte[],System.UInt64,System.UInt64,System.IntPtr)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>UInt64 fwrite(void*, UInt64, UInt64, IntPtr)</caller>
        <method>UInt64 fwrite(IntPtr, UInt64, UInt64, IntPtr)</method>
        <raw>System.UInt64 Mono.Unix.Native.Stdlib::fwrite(System.IntPtr,System.UInt64,System.UInt64,System.IntPtr)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>UInt64 fwrite(Byte[], UInt64, UInt64, IntPtr)</caller>
        <method>UInt64 sys_fwrite(Byte[], UInt64, UInt64, IntPtr)</method>
        <raw>System.UInt64 Mono.Unix.Native.Stdlib::sys_fwrite(System.Byte[],System.UInt64,System.UInt64,System.IntPtr)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>int fgetpos(IntPtr, FilePosition)</caller>
        <method>int sys_fgetpos(IntPtr, HandleRef)</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::sys_fgetpos(System.IntPtr,System.Runtime.InteropServices.HandleRef)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>int fseek(IntPtr, Int64, SeekFlags)</caller>
        <method>int sys_fseek(IntPtr, Int64, int)</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::sys_fseek(System.IntPtr,System.Int64,System.Int32)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>int fsetpos(IntPtr, FilePosition)</caller>
        <method>int sys_fsetpos(IntPtr, HandleRef)</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::sys_fsetpos(System.IntPtr,System.Runtime.InteropServices.HandleRef)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>int perror(string)</caller>
        <method>int perror(string, int)</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::perror(System.String,System.Int32)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>string getenv(string)</caller>
        <method>IntPtr sys_getenv(string)</method>
        <raw>System.IntPtr Mono.Unix.Native.Stdlib::sys_getenv(System.String)</raw>
        <data>msvcrt</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>string strerror(Errno)</caller>
        <method>IntPtr sys_strerror(int)</method>
        <raw>System.IntPtr Mono.Unix.Native.Stdlib::sys_strerror(System.Int32)</raw>
        <data>msvcrt</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>void .cctor()</caller>
        <method>IntPtr GetDefaultSignal()</method>
        <raw>System.IntPtr Mono.Unix.Native.Stdlib::GetDefaultSignal()</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>void .cctor()</caller>
        <method>IntPtr GetErrorSignal()</method>
        <raw>System.IntPtr Mono.Unix.Native.Stdlib::GetErrorSignal()</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>void .cctor()</caller>
        <method>IntPtr GetIgnoreSignal()</method>
        <raw>System.IntPtr Mono.Unix.Native.Stdlib::GetIgnoreSignal()</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>void .cctor()</caller>
        <method>int GetFullyBuffered()</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::GetFullyBuffered()</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>void .cctor()</caller>
        <method>int GetLineBuffered()</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::GetLineBuffered()</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>void .cctor()</caller>
        <method>int GetNonBuffered()</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::GetNonBuffered()</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>void .cctor()</caller>
        <method>int GetBufferSize()</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::GetBufferSize()</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>void .cctor()</caller>
        <method>int GetEOF()</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::GetEOF()</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>void .cctor()</caller>
        <method>int GetFopenMax()</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::GetFopenMax()</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>void .cctor()</caller>
        <method>int GetFilenameMax()</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::GetFilenameMax()</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>void .cctor()</caller>
        <method>int GetTmpnamLength()</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::GetTmpnamLength()</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>void .cctor()</caller>
        <method>IntPtr GetStandardError()</method>
        <raw>System.IntPtr Mono.Unix.Native.Stdlib::GetStandardError()</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>void .cctor()</caller>
        <method>IntPtr GetStandardInput()</method>
        <raw>System.IntPtr Mono.Unix.Native.Stdlib::GetStandardInput()</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>void .cctor()</caller>
        <method>IntPtr GetStandardOutput()</method>
        <raw>System.IntPtr Mono.Unix.Native.Stdlib::GetStandardOutput()</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>void .cctor()</caller>
        <method>int GetTmpMax()</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::GetTmpMax()</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>void .cctor()</caller>
        <method>int GetExitFailure()</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::GetExitFailure()</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>void .cctor()</caller>
        <method>int GetExitSuccess()</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::GetExitSuccess()</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>void .cctor()</caller>
        <method>int GetMbCurMax()</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::GetMbCurMax()</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Stdlib</class>
        <caller>void .cctor()</caller>
        <method>int GetRandMax()</method>
        <raw>System.Int32 Mono.Unix.Native.Stdlib::GetRandMax()</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int setxattr(string, string, Byte[], UInt64)</caller>
        <method>int setxattr(string, string, Byte[], UInt64, XattrFlags)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::setxattr(System.String,System.String,System.Byte[],System.UInt64,Mono.Unix.Native.XattrFlags)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int setxattr(string, string, Byte[], XattrFlags)</caller>
        <method>int setxattr(string, string, Byte[], UInt64, XattrFlags)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::setxattr(System.String,System.String,System.Byte[],System.UInt64,Mono.Unix.Native.XattrFlags)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int lsetxattr(string, string, Byte[], UInt64)</caller>
        <method>int lsetxattr(string, string, Byte[], UInt64, XattrFlags)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::lsetxattr(System.String,System.String,System.Byte[],System.UInt64,Mono.Unix.Native.XattrFlags)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int lsetxattr(string, string, Byte[], XattrFlags)</caller>
        <method>int lsetxattr(string, string, Byte[], UInt64, XattrFlags)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::lsetxattr(System.String,System.String,System.Byte[],System.UInt64,Mono.Unix.Native.XattrFlags)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int fsetxattr(int, string, Byte[], UInt64)</caller>
        <method>int fsetxattr(int, string, Byte[], UInt64, XattrFlags)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::fsetxattr(System.Int32,System.String,System.Byte[],System.UInt64,Mono.Unix.Native.XattrFlags)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int fsetxattr(int, string, Byte[], XattrFlags)</caller>
        <method>int fsetxattr(int, string, Byte[], UInt64, XattrFlags)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::fsetxattr(System.Int32,System.String,System.Byte[],System.UInt64,Mono.Unix.Native.XattrFlags)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Int64 getxattr(string, string, Byte[])</caller>
        <method>Int64 getxattr(string, string, Byte[], UInt64)</method>
        <raw>System.Int64 Mono.Unix.Native.Syscall::getxattr(System.String,System.String,System.Byte[],System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Int64 getxattr(string, string, Byte[]&amp;)</caller>
        <method>Int64 getxattr(string, string, Byte[], UInt64)</method>
        <raw>System.Int64 Mono.Unix.Native.Syscall::getxattr(System.String,System.String,System.Byte[],System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Int64 getxattr(string, string, Byte[]&amp;)</caller>
        <method>Int64 getxattr(string, string, Byte[], UInt64)</method>
        <raw>System.Int64 Mono.Unix.Native.Syscall::getxattr(System.String,System.String,System.Byte[],System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Int64 lgetxattr(string, string, Byte[])</caller>
        <method>Int64 lgetxattr(string, string, Byte[], UInt64)</method>
        <raw>System.Int64 Mono.Unix.Native.Syscall::lgetxattr(System.String,System.String,System.Byte[],System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Int64 lgetxattr(string, string, Byte[]&amp;)</caller>
        <method>Int64 lgetxattr(string, string, Byte[], UInt64)</method>
        <raw>System.Int64 Mono.Unix.Native.Syscall::lgetxattr(System.String,System.String,System.Byte[],System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Int64 lgetxattr(string, string, Byte[]&amp;)</caller>
        <method>Int64 lgetxattr(string, string, Byte[], UInt64)</method>
        <raw>System.Int64 Mono.Unix.Native.Syscall::lgetxattr(System.String,System.String,System.Byte[],System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Int64 fgetxattr(int, string, Byte[])</caller>
        <method>Int64 fgetxattr(int, string, Byte[], UInt64)</method>
        <raw>System.Int64 Mono.Unix.Native.Syscall::fgetxattr(System.Int32,System.String,System.Byte[],System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Int64 fgetxattr(int, string, Byte[]&amp;)</caller>
        <method>Int64 fgetxattr(int, string, Byte[], UInt64)</method>
        <raw>System.Int64 Mono.Unix.Native.Syscall::fgetxattr(System.Int32,System.String,System.Byte[],System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Int64 fgetxattr(int, string, Byte[]&amp;)</caller>
        <method>Int64 fgetxattr(int, string, Byte[], UInt64)</method>
        <raw>System.Int64 Mono.Unix.Native.Syscall::fgetxattr(System.Int32,System.String,System.Byte[],System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Int64 listxattr(string, Encoding, String[]&amp;)</caller>
        <method>Int64 listxattr(string, Byte[], UInt64)</method>
        <raw>System.Int64 Mono.Unix.Native.Syscall::listxattr(System.String,System.Byte[],System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Int64 listxattr(string, Encoding, String[]&amp;)</caller>
        <method>Int64 listxattr(string, Byte[], UInt64)</method>
        <raw>System.Int64 Mono.Unix.Native.Syscall::listxattr(System.String,System.Byte[],System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Int64 llistxattr(string, Encoding, String[]&amp;)</caller>
        <method>Int64 llistxattr(string, Byte[], UInt64)</method>
        <raw>System.Int64 Mono.Unix.Native.Syscall::llistxattr(System.String,System.Byte[],System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Int64 llistxattr(string, Encoding, String[]&amp;)</caller>
        <method>Int64 llistxattr(string, Byte[], UInt64)</method>
        <raw>System.Int64 Mono.Unix.Native.Syscall::llistxattr(System.String,System.Byte[],System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Int64 flistxattr(int, Encoding, String[]&amp;)</caller>
        <method>Int64 flistxattr(int, Byte[], UInt64)</method>
        <raw>System.Int64 Mono.Unix.Native.Syscall::flistxattr(System.Int32,System.Byte[],System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Int64 flistxattr(int, Encoding, String[]&amp;)</caller>
        <method>Int64 flistxattr(int, Byte[], UInt64)</method>
        <raw>System.Int64 Mono.Unix.Native.Syscall::flistxattr(System.Int32,System.Byte[],System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>void CopyDirent(Dirent, Syscall/_Dirent&amp;)</caller>
        <method>void free(IntPtr)</method>
        <raw>System.Void Mono.Unix.Native.Stdlib::free(System.IntPtr)</raw>
        <data>msvcrt</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Dirent readdir(IntPtr)</caller>
        <method>int sys_readdir(IntPtr, Syscall/_Dirent&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_readdir(System.IntPtr,Mono.Unix.Native.Syscall/_Dirent&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int readdir_r(IntPtr, Dirent, IntPtr&amp;)</caller>
        <method>int sys_readdir_r(IntPtr, Syscall/_Dirent&amp;, IntPtr&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_readdir_r(System.IntPtr,Mono.Unix.Native.Syscall/_Dirent&amp;,System.IntPtr&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int fcntl(int, FcntlCommand, DirectoryNotifyFlags)</caller>
        <method>int fcntl(int, FcntlCommand, Int64)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::fcntl(System.Int32,Mono.Unix.Native.FcntlCommand,System.Int64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>void CopyFstab(Fstab, Syscall/_Fstab&amp;)</caller>
        <method>void free(IntPtr)</method>
        <raw>System.Void Mono.Unix.Native.Stdlib::free(System.IntPtr)</raw>
        <data>msvcrt</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int endfsent()</caller>
        <method>int sys_endfsent()</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_endfsent()</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Fstab getfsent()</caller>
        <method>int sys_getfsent(Syscall/_Fstab&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_getfsent(Mono.Unix.Native.Syscall/_Fstab&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Fstab getfsfile(string)</caller>
        <method>int sys_getfsfile(string, Syscall/_Fstab&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_getfsfile(System.String,Mono.Unix.Native.Syscall/_Fstab&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Fstab getfsspec(string)</caller>
        <method>int sys_getfsspec(string, Syscall/_Fstab&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_getfsspec(System.String,Mono.Unix.Native.Syscall/_Fstab&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int setfsent()</caller>
        <method>int sys_setfsent()</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_setfsent()</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int setgroups(UInt32[])</caller>
        <method>int setgroups(UInt64, UInt32[])</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::setgroups(System.UInt64,System.UInt32[])</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>void CopyGroup(Group, Syscall/_Group&amp;)</caller>
        <method>void free(IntPtr)</method>
        <raw>System.Void Mono.Unix.Native.Stdlib::free(System.IntPtr)</raw>
        <data>msvcrt</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>void CopyGroup(Group, Syscall/_Group&amp;)</caller>
        <method>void free(IntPtr)</method>
        <raw>System.Void Mono.Unix.Native.Stdlib::free(System.IntPtr)</raw>
        <data>msvcrt</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Group getgrnam(string)</caller>
        <method>int sys_getgrnam(string, Syscall/_Group&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_getgrnam(System.String,Mono.Unix.Native.Syscall/_Group&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Group getgrgid(uint)</caller>
        <method>int sys_getgrgid(uint, Syscall/_Group&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_getgrgid(System.UInt32,Mono.Unix.Native.Syscall/_Group&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int getgrnam_r(string, Group, Group&amp;)</caller>
        <method>int sys_getgrnam_r(string, Syscall/_Group&amp;, IntPtr&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_getgrnam_r(System.String,Mono.Unix.Native.Syscall/_Group&amp;,System.IntPtr&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int getgrgid_r(uint, Group, Group&amp;)</caller>
        <method>int sys_getgrgid_r(uint, Syscall/_Group&amp;, IntPtr&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_getgrgid_r(System.UInt32,Mono.Unix.Native.Syscall/_Group&amp;,System.IntPtr&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Group getgrent()</caller>
        <method>int sys_getgrent(Syscall/_Group&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_getgrent(Mono.Unix.Native.Syscall/_Group&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int setgrent()</caller>
        <method>int sys_setgrent()</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_setgrent()</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int endgrent()</caller>
        <method>int sys_endgrent()</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_endgrent()</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Group fgetgrent(IntPtr)</caller>
        <method>int sys_fgetgrent(IntPtr, Syscall/_Group&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_fgetgrent(System.IntPtr,Mono.Unix.Native.Syscall/_Group&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>void CopyPasswd(Passwd, Syscall/_Passwd&amp;)</caller>
        <method>void free(IntPtr)</method>
        <raw>System.Void Mono.Unix.Native.Stdlib::free(System.IntPtr)</raw>
        <data>msvcrt</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Passwd getpwnam(string)</caller>
        <method>int sys_getpwnam(string, Syscall/_Passwd&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_getpwnam(System.String,Mono.Unix.Native.Syscall/_Passwd&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Passwd getpwuid(uint)</caller>
        <method>int sys_getpwuid(uint, Syscall/_Passwd&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_getpwuid(System.UInt32,Mono.Unix.Native.Syscall/_Passwd&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int getpwnam_r(string, Passwd, Passwd&amp;)</caller>
        <method>int sys_getpwnam_r(string, Syscall/_Passwd&amp;, IntPtr&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_getpwnam_r(System.String,Mono.Unix.Native.Syscall/_Passwd&amp;,System.IntPtr&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int getpwuid_r(uint, Passwd, Passwd&amp;)</caller>
        <method>int sys_getpwuid_r(uint, Syscall/_Passwd&amp;, IntPtr&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_getpwuid_r(System.UInt32,Mono.Unix.Native.Syscall/_Passwd&amp;,System.IntPtr&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Passwd getpwent()</caller>
        <method>int sys_getpwent(Syscall/_Passwd&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_getpwent(Mono.Unix.Native.Syscall/_Passwd&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int setpwent()</caller>
        <method>int sys_setpwent()</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_setpwent()</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int endpwent()</caller>
        <method>int sys_endpwent()</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_endpwent()</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Passwd fgetpwent(IntPtr)</caller>
        <method>int sys_fgetpwent(IntPtr, Syscall/_Passwd&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_fgetpwent(System.IntPtr,Mono.Unix.Native.Syscall/_Passwd&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int psignal(Signum, string)</caller>
        <method>int psignal(int, string)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::psignal(System.Int32,System.String)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int kill(int, Signum)</caller>
        <method>int sys_kill(int, int)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_kill(System.Int32,System.Int32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>string strsignal(Signum)</caller>
        <method>IntPtr sys_strsignal(int)</method>
        <raw>System.IntPtr Mono.Unix.Native.Syscall::sys_strsignal(System.Int32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>string cuserid(StringBuilder)</caller>
        <method>IntPtr sys_cuserid(StringBuilder)</method>
        <raw>System.IntPtr Mono.Unix.Native.Syscall::sys_cuserid(System.Text.StringBuilder)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int strerror_r(Errno, StringBuilder, UInt64)</caller>
        <method>int sys_strerror_r(int, StringBuilder, UInt64)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_strerror_r(System.Int32,System.Text.StringBuilder,System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int mlockall(MlockallFlags)</caller>
        <method>int sys_mlockall(int)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_mlockall(System.Int32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int poll(Pollfd[], uint, int)</caller>
        <method>int sys_poll(Syscall/_pollfd[], uint, int)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_poll(Mono.Unix.Native.Syscall/_pollfd[],System.UInt32,System.Int32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int chmod(string, FilePermissions)</caller>
        <method>int sys_chmod(string, uint)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_chmod(System.String,System.UInt32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int fchmod(int, FilePermissions)</caller>
        <method>int sys_fchmod(int, uint)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_fchmod(System.Int32,System.UInt32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>FilePermissions umask(FilePermissions)</caller>
        <method>uint sys_umask(uint)</method>
        <raw>System.UInt32 Mono.Unix.Native.Syscall::sys_umask(System.UInt32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int mkdir(string, FilePermissions)</caller>
        <method>int sys_mkdir(string, uint)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_mkdir(System.String,System.UInt32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int mkfifo(string, FilePermissions)</caller>
        <method>int sys_mkfifo(string, uint)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_mkfifo(System.String,System.UInt32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int gettimeofday(Timeval&amp;)</caller>
        <method>int gettimeofday(Timeval&amp;, IntPtr)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::gettimeofday(Mono.Unix.Native.Timeval&amp;,System.IntPtr)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int gettimeofday(Timezone&amp;)</caller>
        <method>int gettimeofday(IntPtr, Timezone&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::gettimeofday(System.IntPtr,Mono.Unix.Native.Timezone&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int settimeofday(Timeval&amp;)</caller>
        <method>int settimeofday(Timeval&amp;, IntPtr)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::settimeofday(Mono.Unix.Native.Timeval&amp;,System.IntPtr)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int utimes(string, Timeval[])</caller>
        <method>int sys_utimes(string, Timeval[])</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_utimes(System.String,Mono.Unix.Native.Timeval[])</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int lutimes(string, Timeval[])</caller>
        <method>int sys_lutimes(string, Timeval[])</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_lutimes(System.String,Mono.Unix.Native.Timeval[])</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int futimes(int, Timeval[])</caller>
        <method>int sys_futimes(int, Timeval[])</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_futimes(System.Int32,Mono.Unix.Native.Timeval[])</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>void CopyUtsname(Utsname&amp;, Syscall/_Utsname&amp;)</caller>
        <method>void free(IntPtr)</method>
        <raw>System.Void Mono.Unix.Native.Stdlib::free(System.IntPtr)</raw>
        <data>msvcrt</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int uname(Utsname&amp;)</caller>
        <method>int sys_uname(Syscall/_Utsname&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_uname(Mono.Unix.Native.Syscall/_Utsname&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int waitpid(int, Int32&amp;, WaitOptions)</caller>
        <method>int waitpid(int, Int32&amp;, int)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::waitpid(System.Int32,System.Int32&amp;,System.Int32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>bool WIFEXITED(int)</caller>
        <method>int _WIFEXITED(int)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::_WIFEXITED(System.Int32)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>bool WIFSIGNALED(int)</caller>
        <method>int _WIFSIGNALED(int)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::_WIFSIGNALED(System.Int32)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Signum WTERMSIG(int)</caller>
        <method>int _WTERMSIG(int)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::_WTERMSIG(System.Int32)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>bool WIFSTOPPED(int)</caller>
        <method>int _WIFSTOPPED(int)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::_WIFSTOPPED(System.Int32)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Signum WSTOPSIG(int)</caller>
        <method>int _WSTOPSIG(int)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::_WSTOPSIG(System.Int32)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int openlog(IntPtr, SyslogOptions, SyslogFacility)</caller>
        <method>int sys_openlog(IntPtr, int, int)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_openlog(System.IntPtr,System.Int32,System.Int32)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int syslog(SyslogFacility, SyslogLevel, string)</caller>
        <method>int sys_syslog(int, string)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_syslog(System.Int32,System.String)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int syslog(SyslogLevel, string)</caller>
        <method>int sys_syslog(int, string)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_syslog(System.Int32,System.String)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int setlogmask(SyslogLevel)</caller>
        <method>int sys_setlogmask(int)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_setlogmask(System.Int32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int access(string, AccessModes)</caller>
        <method>int sys_access(string, int)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_access(System.String,System.Int32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Int64 lseek(int, Int64, SeekFlags)</caller>
        <method>Int64 sys_lseek(int, Int64, int)</method>
        <raw>System.Int64 Mono.Unix.Native.Syscall::sys_lseek(System.Int32,System.Int64,System.Int32)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Int64 read(int, void*, UInt64)</caller>
        <method>Int64 read(int, IntPtr, UInt64)</method>
        <raw>System.Int64 Mono.Unix.Native.Syscall::read(System.Int32,System.IntPtr,System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Int64 write(int, void*, UInt64)</caller>
        <method>Int64 write(int, IntPtr, UInt64)</method>
        <raw>System.Int64 Mono.Unix.Native.Syscall::write(System.Int32,System.IntPtr,System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Int64 pread(int, void*, UInt64, Int64)</caller>
        <method>Int64 pread(int, IntPtr, UInt64, Int64)</method>
        <raw>System.Int64 Mono.Unix.Native.Syscall::pread(System.Int32,System.IntPtr,System.UInt64,System.Int64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Int64 pwrite(int, void*, UInt64, Int64)</caller>
        <method>Int64 pwrite(int, IntPtr, UInt64, Int64)</method>
        <raw>System.Int64 Mono.Unix.Native.Syscall::pwrite(System.Int32,System.IntPtr,System.UInt64,System.Int64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int pipe(Int32[])</caller>
        <method>int pipe(Int32&amp;, Int32&amp;)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::pipe(System.Int32&amp;,System.Int32&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>StringBuilder getcwd(StringBuilder)</caller>
        <method>IntPtr getcwd(StringBuilder, UInt64)</method>
        <raw>System.IntPtr Mono.Unix.Native.Syscall::getcwd(System.Text.StringBuilder,System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Int64 fpathconf(int, PathconfName)</caller>
        <method>Int64 fpathconf(int, PathconfName, Errno)</method>
        <raw>System.Int64 Mono.Unix.Native.Syscall::fpathconf(System.Int32,Mono.Unix.Native.PathconfName,Mono.Unix.Native.Errno)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Int64 pathconf(string, PathconfName)</caller>
        <method>Int64 pathconf(string, PathconfName, Errno)</method>
        <raw>System.Int64 Mono.Unix.Native.Syscall::pathconf(System.String,Mono.Unix.Native.PathconfName,Mono.Unix.Native.Errno)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>Int64 sysconf(SysconfName)</caller>
        <method>Int64 sysconf(SysconfName, Errno)</method>
        <raw>System.Int64 Mono.Unix.Native.Syscall::sysconf(Mono.Unix.Native.SysconfName,Mono.Unix.Native.Errno)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int getgroups(UInt32[])</caller>
        <method>int getgroups(int, UInt32[])</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::getgroups(System.Int32,System.UInt32[])</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>string ttyname(int)</caller>
        <method>IntPtr sys_ttyname(int)</method>
        <raw>System.IntPtr Mono.Unix.Native.Syscall::sys_ttyname(System.Int32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int ttyname_r(int, StringBuilder)</caller>
        <method>int ttyname_r(int, StringBuilder, UInt64)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::ttyname_r(System.Int32,System.Text.StringBuilder,System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>bool isatty(int)</caller>
        <method>int sys_isatty(int)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_isatty(System.Int32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int readlink(string, StringBuilder)</caller>
        <method>int readlink(string, StringBuilder, UInt64)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::readlink(System.String,System.Text.StringBuilder,System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>string getlogin()</caller>
        <method>IntPtr sys_getlogin()</method>
        <raw>System.IntPtr Mono.Unix.Native.Syscall::sys_getlogin()</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int getlogin_r(StringBuilder)</caller>
        <method>int getlogin_r(StringBuilder, UInt64)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::getlogin_r(System.Text.StringBuilder,System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int gethostname(StringBuilder)</caller>
        <method>int gethostname(StringBuilder, UInt64)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::gethostname(System.Text.StringBuilder,System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int sethostname(string)</caller>
        <method>int sethostname(string, UInt64)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sethostname(System.String,System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int getdomainname(StringBuilder)</caller>
        <method>int getdomainname(StringBuilder, UInt64)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::getdomainname(System.Text.StringBuilder,System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int setdomainname(string)</caller>
        <method>int setdomainname(string, UInt64)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::setdomainname(System.String,System.UInt64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>string getusershell()</caller>
        <method>IntPtr sys_getusershell()</method>
        <raw>System.IntPtr Mono.Unix.Native.Syscall::sys_getusershell()</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int setusershell()</caller>
        <method>int sys_setusershell()</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_setusershell()</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int endusershell()</caller>
        <method>int sys_endusershell()</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_endusershell()</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>void swab(void*, void*, Int64)</caller>
        <method>int swab(IntPtr, IntPtr, Int64)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::swab(System.IntPtr,System.IntPtr,System.Int64)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int utime(string, Utimbuf&amp;)</caller>
        <method>int sys_utime(string, Utimbuf&amp;, int)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_utime(System.String,Mono.Unix.Native.Utimbuf&amp;,System.Int32)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int utime(string)</caller>
        <method>int sys_utime(string, Utimbuf&amp;, int)</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::sys_utime(System.String,Mono.Unix.Native.Utimbuf&amp;,System.Int32)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>void .cctor()</caller>
        <method>int _L_ctermid()</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::_L_ctermid()</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>void .cctor()</caller>
        <method>int _L_cuserid()</method>
        <raw>System.Int32 Mono.Unix.Native.Syscall::_L_cuserid()</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Catalog</class>
        <caller>void Init(string, string)</caller>
        <method>IntPtr bindtextdomain(IntPtr, IntPtr)</method>
        <raw>System.IntPtr Mono.Posix.Catalog::bindtextdomain(System.IntPtr,System.IntPtr)</raw>
        <data>intl</data>
      </issue>
      <issue type="pinv">
        <class>Catalog</class>
        <caller>void Init(string, string)</caller>
        <method>IntPtr bind_textdomain_codeset(IntPtr, IntPtr)</method>
        <raw>System.IntPtr Mono.Posix.Catalog::bind_textdomain_codeset(System.IntPtr,System.IntPtr)</raw>
        <data>intl</data>
      </issue>
      <issue type="pinv">
        <class>Catalog</class>
        <caller>void Init(string, string)</caller>
        <method>IntPtr textdomain(IntPtr)</method>
        <raw>System.IntPtr Mono.Posix.Catalog::textdomain(System.IntPtr)</raw>
        <data>intl</data>
      </issue>
      <issue type="pinv">
        <class>Catalog</class>
        <caller>string GetString(string)</caller>
        <method>IntPtr gettext(IntPtr)</method>
        <raw>System.IntPtr Mono.Posix.Catalog::gettext(System.IntPtr)</raw>
        <data>intl</data>
      </issue>
      <issue type="pinv">
        <class>Catalog</class>
        <caller>string GetPluralString(string, string, int)</caller>
        <method>IntPtr ngettext(IntPtr, IntPtr, int)</method>
        <raw>System.IntPtr Mono.Posix.Catalog::ngettext(System.IntPtr,System.IntPtr,System.Int32)</raw>
        <data>intl</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int open(string, OpenFlags)</caller>
        <method>int map_Mono_Posix_OpenFlags(OpenFlags)</method>
        <raw>System.Int32 Mono.Posix.Syscall::map_Mono_Posix_OpenFlags(Mono.Posix.OpenFlags)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int open(string, OpenFlags)</caller>
        <method>int syscall_open(string, int, int)</method>
        <raw>System.Int32 Mono.Posix.Syscall::syscall_open(System.String,System.Int32,System.Int32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int open(string, OpenFlags, FileMode)</caller>
        <method>int map_Mono_Posix_OpenFlags(OpenFlags)</method>
        <raw>System.Int32 Mono.Posix.Syscall::map_Mono_Posix_OpenFlags(Mono.Posix.OpenFlags)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int open(string, OpenFlags, FileMode)</caller>
        <method>int map_Mono_Posix_FileMode(FileMode)</method>
        <raw>System.Int32 Mono.Posix.Syscall::map_Mono_Posix_FileMode(Mono.Posix.FileMode)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int open(string, OpenFlags, FileMode)</caller>
        <method>int syscall_open(string, int, int)</method>
        <raw>System.Int32 Mono.Posix.Syscall::syscall_open(System.String,System.Int32,System.Int32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int waitpid(int, Int32&amp;, WaitOptions)</caller>
        <method>int map_Mono_Posix_WaitOptions(WaitOptions)</method>
        <raw>System.Int32 Mono.Posix.Syscall::map_Mono_Posix_WaitOptions(Mono.Posix.WaitOptions)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int waitpid(int, Int32&amp;, WaitOptions)</caller>
        <method>int syscall_waitpid(int, Int32*, int)</method>
        <raw>System.Int32 Mono.Posix.Syscall::syscall_waitpid(System.Int32,System.Int32*,System.Int32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int waitpid(int, WaitOptions)</caller>
        <method>int map_Mono_Posix_WaitOptions(WaitOptions)</method>
        <raw>System.Int32 Mono.Posix.Syscall::map_Mono_Posix_WaitOptions(Mono.Posix.WaitOptions)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int waitpid(int, WaitOptions)</caller>
        <method>int syscall_waitpid(int, Int32*, int)</method>
        <raw>System.Int32 Mono.Posix.Syscall::syscall_waitpid(System.Int32,System.Int32*,System.Int32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int creat(string, FileMode)</caller>
        <method>int map_Mono_Posix_FileMode(FileMode)</method>
        <raw>System.Int32 Mono.Posix.Syscall::map_Mono_Posix_FileMode(Mono.Posix.FileMode)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int creat(string, FileMode)</caller>
        <method>int syscall_creat(string, int)</method>
        <raw>System.Int32 Mono.Posix.Syscall::syscall_creat(System.String,System.Int32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int chmod(string, FileMode)</caller>
        <method>int map_Mono_Posix_FileMode(FileMode)</method>
        <raw>System.Int32 Mono.Posix.Syscall::map_Mono_Posix_FileMode(Mono.Posix.FileMode)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int chmod(string, FileMode)</caller>
        <method>int syscall_chmod(string, int)</method>
        <raw>System.Int32 Mono.Posix.Syscall::syscall_chmod(System.String,System.Int32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int access(string, AccessMode)</caller>
        <method>int map_Mono_Posix_AccessMode(AccessMode)</method>
        <raw>System.Int32 Mono.Posix.Syscall::map_Mono_Posix_AccessMode(Mono.Posix.AccessMode)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int access(string, AccessMode)</caller>
        <method>int syscall_access(string, int)</method>
        <raw>System.Int32 Mono.Posix.Syscall::syscall_access(System.String,System.Int32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int mkdir(string, FileMode)</caller>
        <method>int map_Mono_Posix_FileMode(FileMode)</method>
        <raw>System.Int32 Mono.Posix.Syscall::map_Mono_Posix_FileMode(Mono.Posix.FileMode)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int mkdir(string, FileMode)</caller>
        <method>int syscall_mkdir(string, int)</method>
        <raw>System.Int32 Mono.Posix.Syscall::syscall_mkdir(System.String,System.Int32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>string getusername(int)</caller>
        <method>string helper_Mono_Posix_GetUserName(int)</method>
        <raw>System.String Mono.Posix.Syscall::helper_Mono_Posix_GetUserName(System.Int32)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>string getgroupname(int)</caller>
        <method>string helper_Mono_Posix_GetGroupName(int)</method>
        <raw>System.String Mono.Posix.Syscall::helper_Mono_Posix_GetGroupName(System.Int32)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>string GetHostName()</caller>
        <method>int syscall_gethostname(Byte[], int)</method>
        <raw>System.Int32 Mono.Posix.Syscall::syscall_gethostname(System.Byte[],System.Int32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>bool isatty(int)</caller>
        <method>int syscall_isatty(int)</method>
        <raw>System.Int32 Mono.Posix.Syscall::syscall_isatty(System.Int32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>int stat2(string, bool, Stat&amp;)</caller>
        <method>int helper_Mono_Posix_Stat(string, bool, Int32&amp;, Int32&amp;, Int32&amp;, Int32&amp;, Int32&amp;, Int32&amp;, Int32&amp;, Int64&amp;, Int64&amp;, Int64&amp;, Int64&amp;, Int64&amp;, Int64&amp;)</method>
        <raw>System.Int32 Mono.Posix.Syscall::helper_Mono_Posix_Stat(System.String,System.Boolean,System.Int32&amp;,System.Int32&amp;,System.Int32&amp;,System.Int32&amp;,System.Int32&amp;,System.Int32&amp;,System.Int32&amp;,System.Int64&amp;,System.Int64&amp;,System.Int64&amp;,System.Int64&amp;,System.Int64&amp;,System.Int64&amp;)</raw>
        <data>MonoPosixHelper</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>string readlink(string)</caller>
        <method>int readlink(string, Byte[], int)</method>
        <raw>System.Int32 Mono.Posix.Syscall::readlink(System.String,System.Byte[],System.Int32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>Syscall</class>
        <caller>string strerror(int)</caller>
        <method>IntPtr _strerror(int)</method>
        <raw>System.IntPtr Mono.Posix.Syscall::_strerror(System.Int32)</raw>
        <data>libc</data>
      </issue>
    </assembly>
    <assembly name="Mono.Security.dll" version="2.0.0.0" runtime="2.0" todo="2" niex="0" miss="0" pinv="0">
      <issue type="todo">
        <class>X509Chain</class>
        <caller>bool IsValid(X509Certificate)</caller>
        <method>bool get_CheckCertificateRevocationList()</method>
        <raw>System.Boolean System.Net.ServicePointManager::get_CheckCertificateRevocationList()</raw>
        <data>CRL checks not implemented</data>
      </issue>
      <issue type="todo">
        <class>HttpsClientStream</class>
        <caller>void .ctor(Stream, X509CertificateCollection, HttpWebRequest, Byte[])</caller>
        <method>bool get_CheckCertificateRevocationList()</method>
        <raw>System.Boolean System.Net.ServicePointManager::get_CheckCertificateRevocationList()</raw>
        <data>CRL checks not implemented</data>
      </issue>
    </assembly>
    <assembly name="Mono.Zeroconf.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Mtp.dll" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="37">
      <issue type="pinv">
        <class>Track</class>
        <caller>void DestroyTrack(IntPtr)</caller>
        <method>void LIBMTP_destroy_track_t(IntPtr)</method>
        <raw>System.Void Mtp.Track::LIBMTP_destroy_track_t(System.IntPtr)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>Track</class>
        <caller>void GetTrack(MtpDeviceHandle, uint, string, ProgressFunction, IntPtr)</caller>
        <method>int LIBMTP_Get_Track_To_File(MtpDeviceHandle, uint, string, ProgressFunction, IntPtr)</method>
        <raw>System.Int32 Mtp.Track::LIBMTP_Get_Track_To_File(Mtp.MtpDeviceHandle,System.UInt32,System.String,Mtp.ProgressFunction,System.IntPtr)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>Track</class>
        <caller>IntPtr GetTrackListing(MtpDeviceHandle, ProgressFunction, IntPtr)</caller>
        <method>IntPtr LIBMTP_Get_Tracklisting_With_Callback(MtpDeviceHandle, ProgressFunction, IntPtr)</method>
        <raw>System.IntPtr Mtp.Track::LIBMTP_Get_Tracklisting_With_Callback(Mtp.MtpDeviceHandle,Mtp.ProgressFunction,System.IntPtr)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>Track</class>
        <caller>void SendTrack(MtpDeviceHandle, string, TrackStruct&amp;, ProgressFunction, IntPtr)</caller>
        <method>int LIBMTP_Send_Track_From_File(MtpDeviceHandle, string, TrackStruct&amp;, ProgressFunction, IntPtr, uint)</method>
        <raw>System.Int32 Mtp.Track::LIBMTP_Send_Track_From_File(Mtp.MtpDeviceHandle,System.String,Mtp.TrackStruct&amp;,Mtp.ProgressFunction,System.IntPtr,System.UInt32)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>Track</class>
        <caller>void UpdateTrackMetadata(MtpDeviceHandle, TrackStruct&amp;)</caller>
        <method>int LIBMTP_Update_Track_Metadata(MtpDeviceHandle, TrackStruct&amp;)</method>
        <raw>System.Int32 Mtp.Track::LIBMTP_Update_Track_Metadata(Mtp.MtpDeviceHandle,Mtp.TrackStruct&amp;)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>Playlist</class>
        <caller>Playlist&gt; GetPlaylists(MtpDevice)</caller>
        <method>IntPtr LIBMTP_Get_Playlist_List(MtpDeviceHandle)</method>
        <raw>System.IntPtr Mtp.Playlist::LIBMTP_Get_Playlist_List(Mtp.MtpDeviceHandle)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>Playlist</class>
        <caller>Playlist&gt; GetPlaylists(MtpDevice)</caller>
        <method>void LIBMTP_destroy_playlist_t(IntPtr)</method>
        <raw>System.Void Mtp.Playlist::LIBMTP_destroy_playlist_t(System.IntPtr)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>Playlist</class>
        <caller>int Create()</caller>
        <method>int LIBMTP_Create_New_Playlist(MtpDeviceHandle, PlaylistStruct&amp;, uint)</method>
        <raw>System.Int32 Mtp.Playlist::LIBMTP_Create_New_Playlist(Mtp.MtpDeviceHandle,Mtp.PlaylistStruct&amp;,System.UInt32)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>Playlist</class>
        <caller>int Update()</caller>
        <method>int LIBMTP_Update_Playlist(MtpDeviceHandle, PlaylistStruct&amp;)</method>
        <raw>System.Int32 Mtp.Playlist::LIBMTP_Update_Playlist(Mtp.MtpDeviceHandle,Mtp.PlaylistStruct&amp;)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>Playlist</class>
        <caller>void Remove()</caller>
        <method>int LIBMTP_Delete_Object(MtpDeviceHandle, uint)</method>
        <raw>System.Int32 Mtp.MtpDevice::LIBMTP_Delete_Object(Mtp.MtpDeviceHandle,System.UInt32)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>MtpDevice</class>
        <caller>void ClearErrorStack(MtpDeviceHandle)</caller>
        <method>void LIBMTP_Clear_Errorstack(MtpDeviceHandle)</method>
        <raw>System.Void Mtp.MtpDevice::LIBMTP_Clear_Errorstack(Mtp.MtpDeviceHandle)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>MtpDevice</class>
        <caller>void DeleteObject(MtpDeviceHandle, uint)</caller>
        <method>int LIBMTP_Delete_Object(MtpDeviceHandle, uint)</method>
        <raw>System.Int32 Mtp.MtpDevice::LIBMTP_Delete_Object(Mtp.MtpDeviceHandle,System.UInt32)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>MtpDevice</class>
        <caller>void GetBatteryLevel(MtpDeviceHandle, UInt16&amp;, UInt16&amp;)</caller>
        <method>int LIBMTP_Get_Batterylevel(MtpDeviceHandle, UInt16&amp;, UInt16&amp;)</method>
        <raw>System.Int32 Mtp.MtpDevice::LIBMTP_Get_Batterylevel(Mtp.MtpDeviceHandle,System.UInt16&amp;,System.UInt16&amp;)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>MtpDevice</class>
        <caller>void GetConnectedDevices(IntPtr&amp;)</caller>
        <method>ErrorCode LIBMTP_Get_Connected_Devices(IntPtr&amp;)</method>
        <raw>Mtp.ErrorCode Mtp.MtpDevice::LIBMTP_Get_Connected_Devices(System.IntPtr&amp;)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>MtpDevice</class>
        <caller>IntPtr GetErrorStack(MtpDeviceHandle)</caller>
        <method>IntPtr LIBMTP_Get_Errorstack(MtpDeviceHandle)</method>
        <raw>System.IntPtr Mtp.MtpDevice::LIBMTP_Get_Errorstack(Mtp.MtpDeviceHandle)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>MtpDevice</class>
        <caller>string GetDeviceversion(MtpDeviceHandle)</caller>
        <method>IntPtr LIBMTP_Get_Deviceversion(MtpDeviceHandle)</method>
        <raw>System.IntPtr Mtp.MtpDevice::LIBMTP_Get_Deviceversion(Mtp.MtpDeviceHandle)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>MtpDevice</class>
        <caller>string GetFriendlyName(MtpDeviceHandle)</caller>
        <method>IntPtr LIBMTP_Get_Friendlyname(MtpDeviceHandle)</method>
        <raw>System.IntPtr Mtp.MtpDevice::LIBMTP_Get_Friendlyname(Mtp.MtpDeviceHandle)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>MtpDevice</class>
        <caller>bool SetFriendlyName(MtpDeviceHandle, string)</caller>
        <method>int LIBMTP_Set_Friendlyname(MtpDeviceHandle, string)</method>
        <raw>System.Int32 Mtp.MtpDevice::LIBMTP_Set_Friendlyname(Mtp.MtpDeviceHandle,System.String)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>MtpDevice</class>
        <caller>string GetSerialnumber(MtpDeviceHandle)</caller>
        <method>IntPtr LIBMTP_Get_Serialnumber(MtpDeviceHandle)</method>
        <raw>System.IntPtr Mtp.MtpDevice::LIBMTP_Get_Serialnumber(Mtp.MtpDeviceHandle)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>MtpDevice</class>
        <caller>void GetStorage(MtpDeviceHandle, int)</caller>
        <method>int LIBMTP_Get_Storage(MtpDeviceHandle, int)</method>
        <raw>System.Int32 Mtp.MtpDevice::LIBMTP_Get_Storage(Mtp.MtpDeviceHandle,System.Int32)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>MtpDevice</class>
        <caller>Int16[] GetFileTypes(MtpDeviceHandle)</caller>
        <method>int LIBMTP_Get_Supported_Filetypes(MtpDeviceHandle, IntPtr&amp;, UInt16&amp;)</method>
        <raw>System.Int32 Mtp.MtpDevice::LIBMTP_Get_Supported_Filetypes(Mtp.MtpDeviceHandle,System.IntPtr&amp;,System.UInt16&amp;)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>MtpDevice</class>
        <caller>void ReleaseDevice(IntPtr)</caller>
        <method>void LIBMTP_Release_Device(IntPtr)</method>
        <raw>System.Void Mtp.MtpDevice::LIBMTP_Release_Device(System.IntPtr)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>MtpDevice</class>
        <caller>void .cctor()</caller>
        <method>void LIBMTP_Init()</method>
        <raw>System.Void Mtp.MtpDevice::LIBMTP_Init()</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>Folder</class>
        <caller>Folder&gt; GetChildren()</caller>
        <method>void LIBMTP_destroy_folder_t(IntPtr)</method>
        <raw>System.Void Mtp.Folder::LIBMTP_destroy_folder_t(System.IntPtr)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>Folder</class>
        <caller>Folder&gt; GetRootFolders(MtpDevice)</caller>
        <method>void LIBMTP_destroy_folder_t(IntPtr)</method>
        <raw>System.Void Mtp.Folder::LIBMTP_destroy_folder_t(System.IntPtr)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>Folder</class>
        <caller>uint CreateFolder(MtpDeviceHandle, string, uint)</caller>
        <method>uint LIBMTP_Create_Folder(MtpDeviceHandle, string, uint)</method>
        <raw>System.UInt32 Mtp.Folder::LIBMTP_Create_Folder(Mtp.MtpDeviceHandle,System.String,System.UInt32)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>Folder</class>
        <caller>void DestroyFolder(IntPtr)</caller>
        <method>void LIBMTP_destroy_folder_t(IntPtr)</method>
        <raw>System.Void Mtp.Folder::LIBMTP_destroy_folder_t(System.IntPtr)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>Folder</class>
        <caller>IntPtr Find(IntPtr, uint)</caller>
        <method>IntPtr LIBMTP_Find_Folder(IntPtr, uint)</method>
        <raw>System.IntPtr Mtp.Folder::LIBMTP_Find_Folder(System.IntPtr,System.UInt32)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>Folder</class>
        <caller>IntPtr GetFolderList(MtpDeviceHandle)</caller>
        <method>IntPtr LIBMTP_Get_Folder_List(MtpDeviceHandle)</method>
        <raw>System.IntPtr Mtp.Folder::LIBMTP_Get_Folder_List(Mtp.MtpDeviceHandle)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>Album</class>
        <caller>Album&gt; GetAlbums(MtpDevice)</caller>
        <method>IntPtr LIBMTP_Get_Album_List(MtpDeviceHandle)</method>
        <raw>System.IntPtr Mtp.Album::LIBMTP_Get_Album_List(Mtp.MtpDeviceHandle)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>Album</class>
        <caller>Album&gt; GetAlbums(MtpDevice)</caller>
        <method>void LIBMTP_destroy_album_t(IntPtr)</method>
        <raw>System.Void Mtp.Album::LIBMTP_destroy_album_t(System.IntPtr)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>Album</class>
        <caller>void Save(Byte[], uint, uint)</caller>
        <method>int LIBMTP_Send_Representative_Sample(MtpDeviceHandle, uint, FileSampleData&amp;)</method>
        <raw>System.Int32 Mtp.FileSample::LIBMTP_Send_Representative_Sample(Mtp.MtpDeviceHandle,System.UInt32,Mtp.FileSampleData&amp;)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>Album</class>
        <caller>int Create()</caller>
        <method>int LIBMTP_Create_New_Album(MtpDeviceHandle, AlbumStruct&amp;, uint)</method>
        <raw>System.Int32 Mtp.Album::LIBMTP_Create_New_Album(Mtp.MtpDeviceHandle,Mtp.AlbumStruct&amp;,System.UInt32)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>Album</class>
        <caller>int Update()</caller>
        <method>int LIBMTP_Update_Album(MtpDeviceHandle, AlbumStruct&amp;)</method>
        <raw>System.Int32 Mtp.Album::LIBMTP_Update_Album(Mtp.MtpDeviceHandle,Mtp.AlbumStruct&amp;)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>Album</class>
        <caller>void Remove()</caller>
        <method>int LIBMTP_Delete_Object(MtpDeviceHandle, uint)</method>
        <raw>System.Int32 Mtp.MtpDevice::LIBMTP_Delete_Object(Mtp.MtpDeviceHandle,System.UInt32)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>Album</class>
        <caller>Album GetById(MtpDevice, uint)</caller>
        <method>IntPtr LIBMTP_Get_Album(MtpDeviceHandle, uint)</method>
        <raw>System.IntPtr Mtp.Album::LIBMTP_Get_Album(Mtp.MtpDeviceHandle,System.UInt32)</raw>
        <data>libmtp.dll</data>
      </issue>
      <issue type="pinv">
        <class>Album</class>
        <caller>Album GetById(MtpDevice, uint)</caller>
        <method>void LIBMTP_destroy_album_t(IntPtr)</method>
        <raw>System.Void Mtp.Album::LIBMTP_destroy_album_t(System.IntPtr)</raw>
        <data>libmtp.dll</data>
      </issue>
    </assembly>
    <assembly name="MusicBrainz.dll" version="0.0.0.0" runtime="2.0" todo="4" niex="0" miss="0" pinv="7">
      <issue type="todo">
        <class>MusicBrainzObject</class>
        <caller>void XmlProcessingClosure(string, XmlProcessingDelegate)</caller>
        <method>void set_CachePolicy(RequestCachePolicy)</method>
        <raw>System.Void System.Net.WebRequest::set_CachePolicy(System.Net.Cache.RequestCachePolicy)</raw>
        <data>Implement the caching system. Currently always returns a policy with the NoCacheNoStore level</data>
      </issue>
      <issue type="todo">
        <class>MusicBrainzObject</class>
        <caller>void XmlProcessingClosure(string, XmlProcessingDelegate)</caller>
        <method>void set_CachePolicy(RequestCachePolicy)</method>
        <raw>System.Void System.Net.WebRequest::set_CachePolicy(System.Net.Cache.RequestCachePolicy)</raw>
        <data>Implement the caching system. Currently always returns a policy with the NoCacheNoStore level</data>
      </issue>
      <issue type="todo">
        <class>MusicBrainzObject</class>
        <caller>void XmlProcessingClosure(string, XmlProcessingDelegate)</caller>
        <method>bool get_IsFromCache()</method>
        <raw>System.Boolean System.Net.WebResponse::get_IsFromCache()</raw>
        <data />
      </issue>
      <issue type="todo">
        <class>MusicBrainzObject</class>
        <caller>void XmlProcessingClosure(string, XmlProcessingDelegate)</caller>
        <method>bool get_IsFromCache()</method>
        <raw>System.Boolean System.Net.WebResponse::get_IsFromCache()</raw>
        <data />
      </issue>
      <issue type="pinv">
        <class>DiscLinux</class>
        <caller>int read_toc_header(int, DiscLinux/cdrom_tochdr&amp;)</caller>
        <method>int read_toc_header(int, int, DiscLinux/cdrom_tochdr&amp;)</method>
        <raw>System.Int32 MusicBrainz.DiscLinux::read_toc_header(System.Int32,System.Int32,MusicBrainz.DiscLinux/cdrom_tochdr&amp;)</raw>
        <data>libc.so.6</data>
      </issue>
      <issue type="pinv">
        <class>DiscLinux</class>
        <caller>int read_multisession(int, DiscLinux/cdrom_multisession&amp;)</caller>
        <method>int read_multisession(int, int, DiscLinux/cdrom_multisession&amp;)</method>
        <raw>System.Int32 MusicBrainz.DiscLinux::read_multisession(System.Int32,System.Int32,MusicBrainz.DiscLinux/cdrom_multisession&amp;)</raw>
        <data>libc.so.6</data>
      </issue>
      <issue type="pinv">
        <class>DiscLinux</class>
        <caller>int read_toc_entry(int, DiscLinux/cdrom_tocentry&amp;)</caller>
        <method>int read_toc_entry(int, int, DiscLinux/cdrom_tocentry&amp;)</method>
        <raw>System.Int32 MusicBrainz.DiscLinux::read_toc_entry(System.Int32,System.Int32,MusicBrainz.DiscLinux/cdrom_tocentry&amp;)</raw>
        <data>libc.so.6</data>
      </issue>
      <issue type="pinv">
        <class>DiscLinux</class>
        <caller>void .ctor(string)</caller>
        <method>int open(string, int)</method>
        <raw>System.Int32 MusicBrainz.DiscLinux::open(System.String,System.Int32)</raw>
        <data>libc.so.6</data>
      </issue>
      <issue type="pinv">
        <class>DiscLinux</class>
        <caller>void .ctor(string)</caller>
        <method>int close(int)</method>
        <raw>System.Int32 MusicBrainz.DiscLinux::close(System.Int32)</raw>
        <data>libc.so.6</data>
      </issue>
      <issue type="pinv">
        <class>DiscWin32</class>
        <caller>void MciClosure(string, string, DiscWin32/MciCall)</caller>
        <method>int mciSendString(string, StringBuilder, int, IntPtr)</method>
        <raw>System.Int32 MusicBrainz.DiscWin32::mciSendString(System.String,System.Text.StringBuilder,System.Int32,System.IntPtr)</raw>
        <data>winmm</data>
      </issue>
      <issue type="pinv">
        <class>DiscWin32</class>
        <caller>void MciClosure(string, string, DiscWin32/MciCall)</caller>
        <method>int mciGetErrorString(int, StringBuilder, int)</method>
        <raw>System.Int32 MusicBrainz.DiscWin32::mciGetErrorString(System.Int32,System.Text.StringBuilder,System.Int32)</raw>
        <data>winmm</data>
      </issue>
    </assembly>
    <assembly name="NDesk.DBus.dll" version="1.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="6">
      <issue type="pinv">
        <class>UnixSocket</class>
        <caller>void Connect(Byte[])</caller>
        <method>int connect(int, Byte[], uint)</method>
        <raw>System.Int32 NDesk.DBus.Transports.UnixSocket::connect(System.Int32,System.Byte[],System.UInt32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixSocket</class>
        <caller>void Bind(Byte[])</caller>
        <method>int bind(int, Byte[], uint)</method>
        <raw>System.Int32 NDesk.DBus.Transports.UnixSocket::bind(System.Int32,System.Byte[],System.UInt32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixSocket</class>
        <caller>void Listen(int)</caller>
        <method>int listen(int, int)</method>
        <raw>System.Int32 NDesk.DBus.Transports.UnixSocket::listen(System.Int32,System.Int32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixSocket</class>
        <caller>UnixSocket Accept()</caller>
        <method>int accept(int, Byte[], UInt32&amp;)</method>
        <raw>System.Int32 NDesk.DBus.Transports.UnixSocket::accept(System.Int32,System.Byte[],System.UInt32&amp;)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixSocket</class>
        <caller>void .ctor()</caller>
        <method>int socket(int, int, int)</method>
        <raw>System.Int32 NDesk.DBus.Transports.UnixSocket::socket(System.Int32,System.Int32,System.Int32)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>UnixNativeTransport</class>
        <caller>void WriteBsdCred()</caller>
        <method>int sendmsg(int, IntPtr, int)</method>
        <raw>System.Int32 NDesk.DBus.Transports.UnixSocket::sendmsg(System.Int32,System.IntPtr,System.Int32)</raw>
        <data>libc</data>
      </issue>
    </assembly>
    <assembly name="NDesk.DBus.GLib.dll" version="1.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="11">
      <issue type="pinv">
        <class>IOChannel</class>
        <caller>int get_UnixFd()</caller>
        <method>int g_io_channel_unix_get_fd(IntPtr)</method>
        <raw>System.Int32 NDesk.GLib.IOChannel::g_io_channel_unix_get_fd(System.IntPtr)</raw>
        <data>libglib-2.0-0.dll</data>
      </issue>
      <issue type="pinv">
        <class>IOChannel</class>
        <caller>uint get_BufferSize()</caller>
        <method>uint g_io_channel_get_buffer_size(IntPtr)</method>
        <raw>System.UInt32 NDesk.GLib.IOChannel::g_io_channel_get_buffer_size(System.IntPtr)</raw>
        <data>libglib-2.0-0.dll</data>
      </issue>
      <issue type="pinv">
        <class>IOChannel</class>
        <caller>void set_BufferSize(uint)</caller>
        <method>void g_io_channel_set_buffer_size(IntPtr, uint)</method>
        <raw>System.Void NDesk.GLib.IOChannel::g_io_channel_set_buffer_size(System.IntPtr,System.UInt32)</raw>
        <data>libglib-2.0-0.dll</data>
      </issue>
      <issue type="pinv">
        <class>IOChannel</class>
        <caller>IOCondition get_BufferCondition()</caller>
        <method>IOCondition g_io_channel_get_buffer_condition(IntPtr)</method>
        <raw>NDesk.GLib.IOCondition NDesk.GLib.IOChannel::g_io_channel_get_buffer_condition(System.IntPtr)</raw>
        <data>libglib-2.0-0.dll</data>
      </issue>
      <issue type="pinv">
        <class>IOChannel</class>
        <caller>IOFlags get_Flags()</caller>
        <method>IOFlags g_io_channel_get_flags(IntPtr)</method>
        <raw>NDesk.GLib.IOFlags NDesk.GLib.IOChannel::g_io_channel_get_flags(System.IntPtr)</raw>
        <data>libglib-2.0-0.dll</data>
      </issue>
      <issue type="pinv">
        <class>IOChannel</class>
        <caller>void set_Flags(IOFlags)</caller>
        <method>Int16 g_io_channel_set_flags(IntPtr, IOFlags, IntPtr)</method>
        <raw>System.Int16 NDesk.GLib.IOChannel::g_io_channel_set_flags(System.IntPtr,NDesk.GLib.IOFlags,System.IntPtr)</raw>
        <data>libglib-2.0-0.dll</data>
      </issue>
      <issue type="pinv">
        <class>IOChannel</class>
        <caller>void .ctor(int)</caller>
        <method>IntPtr g_io_channel_unix_new(int)</method>
        <raw>System.IntPtr NDesk.GLib.IOChannel::g_io_channel_unix_new(System.Int32)</raw>
        <data>libglib-2.0-0.dll</data>
      </issue>
      <issue type="pinv">
        <class>IO</class>
        <caller>uint AddWatch(IOChannel, IOCondition, IOFunc)</caller>
        <method>uint g_io_add_watch(IntPtr, IOCondition, IOFunc, IntPtr)</method>
        <raw>System.UInt32 NDesk.GLib.IO::g_io_add_watch(System.IntPtr,NDesk.GLib.IOCondition,NDesk.GLib.IOFunc,System.IntPtr)</raw>
        <data>libglib-2.0-0.dll</data>
      </issue>
      <issue type="pinv">
        <class>IO</class>
        <caller>uint AddWatch(IOChannel, int, IOCondition, IOFunc, DestroyNotify)</caller>
        <method>uint g_io_add_watch_full(IntPtr, int, IOCondition, IOFunc, IntPtr, DestroyNotify)</method>
        <raw>System.UInt32 NDesk.GLib.IO::g_io_add_watch_full(System.IntPtr,System.Int32,NDesk.GLib.IOCondition,NDesk.GLib.IOFunc,System.IntPtr,NDesk.GLib.DestroyNotify)</raw>
        <data>libglib-2.0-0.dll</data>
      </issue>
      <issue type="pinv">
        <class>IO</class>
        <caller>IntPtr MainContextDefault()</caller>
        <method>IntPtr g_main_context_default()</method>
        <raw>System.IntPtr NDesk.GLib.IO::g_main_context_default()</raw>
        <data>libglib-2.0-0.dll</data>
      </issue>
      <issue type="pinv">
        <class>IO</class>
        <caller>void MainContextWakeup(IntPtr)</caller>
        <method>void g_main_context_wakeup(IntPtr)</method>
        <raw>System.Void NDesk.GLib.IO::g_main_context_wakeup(System.IntPtr)</raw>
        <data>libglib-2.0-0.dll</data>
      </issue>
    </assembly>
    <assembly name="taglib-sharp.dll" version="2.0.3.6" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="webkit-sharp.dll" version="1.0.0.0" runtime="1.1" todo="0" niex="0" miss="0" pinv="79">
      <issue type="pinv">
        <class>NetworkRequest</class>
        <caller>GType get_GType()</caller>
        <method>IntPtr webkit_network_request_get_type()</method>
        <raw>System.IntPtr WebKit.NetworkRequest::webkit_network_request_get_type()</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>NetworkRequest</class>
        <caller>string get_Uri()</caller>
        <method>IntPtr webkit_network_request_get_uri(IntPtr)</method>
        <raw>System.IntPtr WebKit.NetworkRequest::webkit_network_request_get_uri(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>NetworkRequest</class>
        <caller>void set_Uri(string)</caller>
        <method>void webkit_network_request_set_uri(IntPtr, IntPtr)</method>
        <raw>System.Void WebKit.NetworkRequest::webkit_network_request_set_uri(System.IntPtr,System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>NetworkRequest</class>
        <caller>void .ctor(string)</caller>
        <method>IntPtr webkit_network_request_new(IntPtr)</method>
        <raw>System.IntPtr WebKit.NetworkRequest::webkit_network_request_new(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebBackForwardList</class>
        <caller>int get_ForwardLength()</caller>
        <method>int webkit_web_back_forward_list_get_forward_length(IntPtr)</method>
        <raw>System.Int32 WebKit.WebBackForwardList::webkit_web_back_forward_list_get_forward_length(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebBackForwardList</class>
        <caller>int get_Limit()</caller>
        <method>int webkit_web_back_forward_list_get_limit(IntPtr)</method>
        <raw>System.Int32 WebKit.WebBackForwardList::webkit_web_back_forward_list_get_limit(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebBackForwardList</class>
        <caller>void set_Limit(int)</caller>
        <method>void webkit_web_back_forward_list_set_limit(IntPtr, int)</method>
        <raw>System.Void WebKit.WebBackForwardList::webkit_web_back_forward_list_set_limit(System.IntPtr,System.Int32)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebBackForwardList</class>
        <caller>WebHistoryItem get_ForwardItem()</caller>
        <method>IntPtr webkit_web_back_forward_list_get_forward_item(IntPtr)</method>
        <raw>System.IntPtr WebKit.WebBackForwardList::webkit_web_back_forward_list_get_forward_item(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebBackForwardList</class>
        <caller>void GoBack()</caller>
        <method>void webkit_web_back_forward_list_go_back(IntPtr)</method>
        <raw>System.Void WebKit.WebBackForwardList::webkit_web_back_forward_list_go_back(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebBackForwardList</class>
        <caller>bool ContainsItem(WebHistoryItem)</caller>
        <method>bool webkit_web_back_forward_list_contains_item(IntPtr, IntPtr)</method>
        <raw>System.Boolean WebKit.WebBackForwardList::webkit_web_back_forward_list_contains_item(System.IntPtr,System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebBackForwardList</class>
        <caller>WebHistoryItem GetNthItem(int)</caller>
        <method>IntPtr webkit_web_back_forward_list_get_nth_item(IntPtr, int)</method>
        <raw>System.IntPtr WebKit.WebBackForwardList::webkit_web_back_forward_list_get_nth_item(System.IntPtr,System.Int32)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebBackForwardList</class>
        <caller>List GetBackListWithLimit(int)</caller>
        <method>IntPtr webkit_web_back_forward_list_get_back_list_with_limit(IntPtr, int)</method>
        <raw>System.IntPtr WebKit.WebBackForwardList::webkit_web_back_forward_list_get_back_list_with_limit(System.IntPtr,System.Int32)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebBackForwardList</class>
        <caller>void GoForward()</caller>
        <method>void webkit_web_back_forward_list_go_forward(IntPtr)</method>
        <raw>System.Void WebKit.WebBackForwardList::webkit_web_back_forward_list_go_forward(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebBackForwardList</class>
        <caller>WebHistoryItem get_CurrentItem()</caller>
        <method>IntPtr webkit_web_back_forward_list_get_current_item(IntPtr)</method>
        <raw>System.IntPtr WebKit.WebBackForwardList::webkit_web_back_forward_list_get_current_item(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebBackForwardList</class>
        <caller>void GoToItem(WebHistoryItem)</caller>
        <method>void webkit_web_back_forward_list_go_to_item(IntPtr, IntPtr)</method>
        <raw>System.Void WebKit.WebBackForwardList::webkit_web_back_forward_list_go_to_item(System.IntPtr,System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebBackForwardList</class>
        <caller>int get_BackLength()</caller>
        <method>int webkit_web_back_forward_list_get_back_length(IntPtr)</method>
        <raw>System.Int32 WebKit.WebBackForwardList::webkit_web_back_forward_list_get_back_length(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebBackForwardList</class>
        <caller>List GetForwardListWithLimit(int)</caller>
        <method>IntPtr webkit_web_back_forward_list_get_forward_list_with_limit(IntPtr, int)</method>
        <raw>System.IntPtr WebKit.WebBackForwardList::webkit_web_back_forward_list_get_forward_list_with_limit(System.IntPtr,System.Int32)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebBackForwardList</class>
        <caller>WebHistoryItem get_BackItem()</caller>
        <method>IntPtr webkit_web_back_forward_list_get_back_item(IntPtr)</method>
        <raw>System.IntPtr WebKit.WebBackForwardList::webkit_web_back_forward_list_get_back_item(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebBackForwardList</class>
        <caller>GType get_GType()</caller>
        <method>IntPtr webkit_web_back_forward_list_get_type()</method>
        <raw>System.IntPtr WebKit.WebBackForwardList::webkit_web_back_forward_list_get_type()</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebBackForwardList</class>
        <caller>void .ctor(WebView)</caller>
        <method>IntPtr webkit_web_back_forward_list_new_with_web_view(IntPtr)</method>
        <raw>System.IntPtr WebKit.WebBackForwardList::webkit_web_back_forward_list_new_with_web_view(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebFrame</class>
        <caller>void StopLoading()</caller>
        <method>void webkit_web_frame_stop_loading(IntPtr)</method>
        <raw>System.Void WebKit.WebFrame::webkit_web_frame_stop_loading(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebFrame</class>
        <caller>string get_Title()</caller>
        <method>IntPtr webkit_web_frame_get_title(IntPtr)</method>
        <raw>System.IntPtr WebKit.WebFrame::webkit_web_frame_get_title(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebFrame</class>
        <caller>void Reload()</caller>
        <method>void webkit_web_frame_reload(IntPtr)</method>
        <raw>System.Void WebKit.WebFrame::webkit_web_frame_reload(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebFrame</class>
        <caller>WebView get_WebView()</caller>
        <method>IntPtr webkit_web_frame_get_web_view(IntPtr)</method>
        <raw>System.IntPtr WebKit.WebFrame::webkit_web_frame_get_web_view(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebFrame</class>
        <caller>WebFrame FindFrame(string)</caller>
        <method>IntPtr webkit_web_frame_find_frame(IntPtr, IntPtr)</method>
        <raw>System.IntPtr WebKit.WebFrame::webkit_web_frame_find_frame(System.IntPtr,System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebFrame</class>
        <caller>string get_Uri()</caller>
        <method>IntPtr webkit_web_frame_get_uri(IntPtr)</method>
        <raw>System.IntPtr WebKit.WebFrame::webkit_web_frame_get_uri(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebFrame</class>
        <caller>string get_Name()</caller>
        <method>IntPtr webkit_web_frame_get_name(IntPtr)</method>
        <raw>System.IntPtr WebKit.WebFrame::webkit_web_frame_get_name(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebFrame</class>
        <caller>void LoadRequest(NetworkRequest)</caller>
        <method>void webkit_web_frame_load_request(IntPtr, IntPtr)</method>
        <raw>System.Void WebKit.WebFrame::webkit_web_frame_load_request(System.IntPtr,System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebFrame</class>
        <caller>GType get_GType()</caller>
        <method>IntPtr webkit_web_frame_get_type()</method>
        <raw>System.IntPtr WebKit.WebFrame::webkit_web_frame_get_type()</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebFrame</class>
        <caller>WebFrame get_Parent()</caller>
        <method>IntPtr webkit_web_frame_get_parent(IntPtr)</method>
        <raw>System.IntPtr WebKit.WebFrame::webkit_web_frame_get_parent(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebFrame</class>
        <caller>void .ctor(WebView)</caller>
        <method>IntPtr webkit_web_frame_new(IntPtr)</method>
        <raw>System.IntPtr WebKit.WebFrame::webkit_web_frame_new(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebHistoryItem</class>
        <caller>GType get_GType()</caller>
        <method>IntPtr webkit_web_history_item_get_type()</method>
        <raw>System.IntPtr WebKit.WebHistoryItem::webkit_web_history_item_get_type()</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebHistoryItem</class>
        <caller>void set_AlternateTitle(string)</caller>
        <method>void webkit_web_history_item_set_alternate_title(IntPtr, IntPtr)</method>
        <raw>System.Void WebKit.WebHistoryItem::webkit_web_history_item_set_alternate_title(System.IntPtr,System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebHistoryItem</class>
        <caller>double get_LastVisitedTime()</caller>
        <method>double webkit_web_history_item_get_last_visited_time(IntPtr)</method>
        <raw>System.Double WebKit.WebHistoryItem::webkit_web_history_item_get_last_visited_time(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebHistoryItem</class>
        <caller>void .ctor()</caller>
        <method>IntPtr webkit_web_history_item_new()</method>
        <raw>System.IntPtr WebKit.WebHistoryItem::webkit_web_history_item_new()</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebHistoryItem</class>
        <caller>void .ctor(string, string)</caller>
        <method>IntPtr webkit_web_history_item_new_with_data(IntPtr, IntPtr)</method>
        <raw>System.IntPtr WebKit.WebHistoryItem::webkit_web_history_item_new_with_data(System.IntPtr,System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebSettings</class>
        <caller>WebSettings Copy()</caller>
        <method>IntPtr webkit_web_settings_copy(IntPtr)</method>
        <raw>System.IntPtr WebKit.WebSettings::webkit_web_settings_copy(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebSettings</class>
        <caller>GType get_GType()</caller>
        <method>IntPtr webkit_web_settings_get_type()</method>
        <raw>System.IntPtr WebKit.WebSettings::webkit_web_settings_get_type()</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebSettings</class>
        <caller>void .ctor()</caller>
        <method>IntPtr webkit_web_settings_new()</method>
        <raw>System.IntPtr WebKit.WebSettings::webkit_web_settings_new()</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>void CutClipboard()</caller>
        <method>void webkit_web_view_cut_clipboard(IntPtr)</method>
        <raw>System.Void WebKit.WebView::webkit_web_view_cut_clipboard(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>GType get_GType()</caller>
        <method>IntPtr webkit_web_view_get_type()</method>
        <raw>System.IntPtr WebKit.WebView::webkit_web_view_get_type()</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>void LoadString(string, string, string, string)</caller>
        <method>void webkit_web_view_load_string(IntPtr, IntPtr, IntPtr, IntPtr, IntPtr)</method>
        <raw>System.Void WebKit.WebView::webkit_web_view_load_string(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>void Reload()</caller>
        <method>void webkit_web_view_reload(IntPtr)</method>
        <raw>System.Void WebKit.WebView::webkit_web_view_reload(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>WebBackForwardList get_BackForwardList()</caller>
        <method>IntPtr webkit_web_view_get_back_forward_list(IntPtr)</method>
        <raw>System.IntPtr WebKit.WebView::webkit_web_view_get_back_forward_list(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>void GoBackOrForward(int)</caller>
        <method>void webkit_web_view_go_back_or_forward(IntPtr, int)</method>
        <raw>System.Void WebKit.WebView::webkit_web_view_go_back_or_forward(System.IntPtr,System.Int32)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>bool CanGoForward()</caller>
        <method>bool webkit_web_view_can_go_forward(IntPtr)</method>
        <raw>System.Boolean WebKit.WebView::webkit_web_view_can_go_forward(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>bool CanGoBackOrForward(int)</caller>
        <method>bool webkit_web_view_can_go_back_or_forward(IntPtr, int)</method>
        <raw>System.Boolean WebKit.WebView::webkit_web_view_can_go_back_or_forward(System.IntPtr,System.Int32)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>bool CanCutClipboard()</caller>
        <method>bool webkit_web_view_can_cut_clipboard(IntPtr)</method>
        <raw>System.Boolean WebKit.WebView::webkit_web_view_can_cut_clipboard(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>WebFrame get_MainFrame()</caller>
        <method>IntPtr webkit_web_view_get_main_frame(IntPtr)</method>
        <raw>System.IntPtr WebKit.WebView::webkit_web_view_get_main_frame(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>void GoBack()</caller>
        <method>void webkit_web_view_go_back(IntPtr)</method>
        <raw>System.Void WebKit.WebView::webkit_web_view_go_back(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>TargetList get_PasteTargetList()</caller>
        <method>IntPtr webkit_web_view_get_paste_target_list(IntPtr)</method>
        <raw>System.IntPtr WebKit.WebView::webkit_web_view_get_paste_target_list(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>bool CanGoBack()</caller>
        <method>bool webkit_web_view_can_go_back(IntPtr)</method>
        <raw>System.Boolean WebKit.WebView::webkit_web_view_can_go_back(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>void set_MaintainsBackForwardList(bool)</caller>
        <method>void webkit_web_view_set_maintains_back_forward_list(IntPtr, bool)</method>
        <raw>System.Void WebKit.WebView::webkit_web_view_set_maintains_back_forward_list(System.IntPtr,System.Boolean)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>bool get_Editable()</caller>
        <method>bool webkit_web_view_get_editable(IntPtr)</method>
        <raw>System.Boolean WebKit.WebView::webkit_web_view_get_editable(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>void set_Editable(bool)</caller>
        <method>void webkit_web_view_set_editable(IntPtr, bool)</method>
        <raw>System.Void WebKit.WebView::webkit_web_view_set_editable(System.IntPtr,System.Boolean)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>bool get_Transparent()</caller>
        <method>bool webkit_web_view_get_transparent(IntPtr)</method>
        <raw>System.Boolean WebKit.WebView::webkit_web_view_get_transparent(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>void set_Transparent(bool)</caller>
        <method>void webkit_web_view_set_transparent(IntPtr, bool)</method>
        <raw>System.Void WebKit.WebView::webkit_web_view_set_transparent(System.IntPtr,System.Boolean)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>void SelectAll()</caller>
        <method>void webkit_web_view_select_all(IntPtr)</method>
        <raw>System.Void WebKit.WebView::webkit_web_view_select_all(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>void UnmarkTextMatches()</caller>
        <method>void webkit_web_view_unmark_text_matches(IntPtr)</method>
        <raw>System.Void WebKit.WebView::webkit_web_view_unmark_text_matches(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>bool CanPasteClipboard()</caller>
        <method>bool webkit_web_view_can_paste_clipboard(IntPtr)</method>
        <raw>System.Boolean WebKit.WebView::webkit_web_view_can_paste_clipboard(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>WebFrame get_FocusedFrame()</caller>
        <method>IntPtr webkit_web_view_get_focused_frame(IntPtr)</method>
        <raw>System.IntPtr WebKit.WebView::webkit_web_view_get_focused_frame(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>bool CanCopyClipboard()</caller>
        <method>bool webkit_web_view_can_copy_clipboard(IntPtr)</method>
        <raw>System.Boolean WebKit.WebView::webkit_web_view_can_copy_clipboard(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>uint MarkTextMatches(string, bool, uint)</caller>
        <method>uint webkit_web_view_mark_text_matches(IntPtr, IntPtr, bool, uint)</method>
        <raw>System.UInt32 WebKit.WebView::webkit_web_view_mark_text_matches(System.IntPtr,System.IntPtr,System.Boolean,System.UInt32)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>TargetList get_CopyTargetList()</caller>
        <method>IntPtr webkit_web_view_get_copy_target_list(IntPtr)</method>
        <raw>System.IntPtr WebKit.WebView::webkit_web_view_get_copy_target_list(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>bool get_HasSelection()</caller>
        <method>bool webkit_web_view_has_selection(IntPtr)</method>
        <raw>System.Boolean WebKit.WebView::webkit_web_view_has_selection(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>WebSettings get_Settings()</caller>
        <method>IntPtr webkit_web_view_get_settings(IntPtr)</method>
        <raw>System.IntPtr WebKit.WebView::webkit_web_view_get_settings(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>void set_Settings(WebSettings)</caller>
        <method>void webkit_web_view_set_settings(IntPtr, IntPtr)</method>
        <raw>System.Void WebKit.WebView::webkit_web_view_set_settings(System.IntPtr,System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>void StopLoading()</caller>
        <method>void webkit_web_view_stop_loading(IntPtr)</method>
        <raw>System.Void WebKit.WebView::webkit_web_view_stop_loading(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>bool GoToBackForwardItem(WebHistoryItem)</caller>
        <method>bool webkit_web_view_go_to_back_forward_item(IntPtr, IntPtr)</method>
        <raw>System.Boolean WebKit.WebView::webkit_web_view_go_to_back_forward_item(System.IntPtr,System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>void PasteClipboard()</caller>
        <method>void webkit_web_view_paste_clipboard(IntPtr)</method>
        <raw>System.Void WebKit.WebView::webkit_web_view_paste_clipboard(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>void set_HighlightTextMatches(bool)</caller>
        <method>void webkit_web_view_set_highlight_text_matches(IntPtr, bool)</method>
        <raw>System.Void WebKit.WebView::webkit_web_view_set_highlight_text_matches(System.IntPtr,System.Boolean)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>void Open(string)</caller>
        <method>void webkit_web_view_open(IntPtr, IntPtr)</method>
        <raw>System.Void WebKit.WebView::webkit_web_view_open(System.IntPtr,System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>void ExecuteScript(string)</caller>
        <method>void webkit_web_view_execute_script(IntPtr, IntPtr)</method>
        <raw>System.Void WebKit.WebView::webkit_web_view_execute_script(System.IntPtr,System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>void LoadHtmlString(string, string)</caller>
        <method>void webkit_web_view_load_html_string(IntPtr, IntPtr, IntPtr)</method>
        <raw>System.Void WebKit.WebView::webkit_web_view_load_html_string(System.IntPtr,System.IntPtr,System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>bool SearchText(string, bool, bool, bool)</caller>
        <method>bool webkit_web_view_search_text(IntPtr, IntPtr, bool, bool, bool)</method>
        <raw>System.Boolean WebKit.WebView::webkit_web_view_search_text(System.IntPtr,System.IntPtr,System.Boolean,System.Boolean,System.Boolean)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>void GoForward()</caller>
        <method>void webkit_web_view_go_forward(IntPtr)</method>
        <raw>System.Void WebKit.WebView::webkit_web_view_go_forward(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>void CopyClipboard()</caller>
        <method>void webkit_web_view_copy_clipboard(IntPtr)</method>
        <raw>System.Void WebKit.WebView::webkit_web_view_copy_clipboard(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>void DeleteSelection()</caller>
        <method>void webkit_web_view_delete_selection(IntPtr)</method>
        <raw>System.Void WebKit.WebView::webkit_web_view_delete_selection(System.IntPtr)</raw>
        <data>webkit-1.0</data>
      </issue>
      <issue type="pinv">
        <class>WebView</class>
        <caller>void .ctor()</caller>
        <method>IntPtr webkit_web_view_new()</method>
        <raw>System.IntPtr WebKit.WebView::webkit_web_view_new()</raw>
        <data>webkit-1.0</data>
      </issue>
    </assembly>
    <assembly name="Banshee.AmazonMp3.exe" version="0.0.0.0" runtime="2.0" todo="1" niex="0" miss="0" pinv="0">
      <issue type="todo">
        <class>ConsoleTool/&lt;&gt;c__DisplayClass4</class>
        <caller>void &lt;Main&gt;b__3(HttpDownloader)</caller>
        <method>int get_WindowWidth()</method>
        <raw>System.Int32 System.Console::get_WindowWidth()</raw>
        <data>Only works on windows</data>
      </issue>
    </assembly>
    <assembly name="Muinshee.exe" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Muinshee.vshost.exe" version="9.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Nereid.exe" version="0.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Nereid.vshost.exe" version="9.0.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
  </assemblies>
</report>